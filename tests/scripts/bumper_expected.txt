Compiling 'bumper.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Generating object code
Pass 6: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSR d2,0.0007
SETR d4,SP
LOADD d2,7
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
PUSHARGSR d4,0.0002; if() #9274 Test AND while(true) #9272 Body [Opt:AlwaysOn] Start AND Int.Func[int Distance(int, int, int, int)] Params Start
LOADD d2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0883; UsrFunc[int CenterX(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0907; UsrFunc[int CenterY(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0873; UsrFunc[int CenterLinkX()] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0878; UsrFunc[int CenterLinkY()] Call
POP d4
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0487; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
MULTV d2,8
ADDV d2,2
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 72
SETR d2,LINKZ
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 119; Test 'if'
LOADD d2,7; if() #9276 Test AND if() #9274 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFINITDD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 116; Test 'if'
SETV d2,76; InlineFunc[void Game->PlaySound(int)] Params AND if() #9276 Body Start
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHARGSR d4,0.0002; UsrFunc[int Angle(int, int, int, int)] Params Start
LOADD d2,7; UsrFunc[int CenterX(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterX(FFC)] Params End
CALLFUNC 0.0883; UsrFunc[int CenterX(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,7; UsrFunc[int CenterY(FFC)] Params Start
PUSHR d2; UsrFunc[int CenterY(FFC)] Params End
CALLFUNC 0.0907; UsrFunc[int CenterY(FFC)] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0873; UsrFunc[int CenterLinkX()] Call
POP d4
PUSHR d2
PUSHR d4
CALLFUNC 0.0878; UsrFunc[int CenterLinkY()] Call
POP d4
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0550; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,5
LOADD d2,8
STORED d2,4
SETV d2,16
STORED d2,3; if() #9276 Body End
PUSHR d4
CALLFUNC 0.0931; UsrFunc[void NoAction()] Call
POP d4; if() #9274 Body End
LOADD d2,4; if() #9277 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 153; Test 'if'
LOADD d2,2; if() #9277 Body Start
PUSHR d2
PUSHR d4
PUSHV 3; UsrFunc[int VectorX(int, int)] Params Start
LOADD d2,5
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.0976; UsrFunc[int VectorX(int, int)] Call
POP d4
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,1
PUSHR d2
PUSHR d4
PUSHV 3; UsrFunc[int VectorY(int, int)] Params Start
LOADD d2,5
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.0987; UsrFunc[int VectorY(int, int)] Call
POP d4
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,4
PUSHR d2
SUBV d2,1
STORED d2,4
POP d2; if() #9277 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #9278 Test
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 305; Test 'if'
SETV d2,0; for() #9279 setup AND if() #9278 Body Start
STORED d2,0
LOADD d2,0; for() #9279 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 174
LOADD d2,2
COMPAREV d2,-1
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 233; for() #9279 TestFail?
PUSHR d4; if() #9283 Test AND for() #9279 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 2
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0570; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 201; Test 'if'
SETR d2,LINKX; if() #9283 Body Start
PUSHR d2
SUBV d2,1
PUSHR d2
POP d2
SETR LINKX,d2
POP d2
LOADD d2,2
PUSHR d2
ADDV d2,1
STORED d2,2
POP d2
GOTO 227; if() #9283 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #9285 Test AND if() #9283 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 225; Test 'if'
LOADD d2,1; if() #9285 Body Start
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0998; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,1; if() #9285 Body End
SETV d2,0
STORED d2,2; if() #9283 Else End
LOADD d2,0; for() #9279 Body End AND for() #9279 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 163; for() #9279 End
SETV d2,0; for() #9286 setup
STORED d2,0
LOADD d2,0; for() #9286 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 246
LOADD d2,2
COMPAREV d2,1
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 305; for() #9286 TestFail?
PUSHR d4; if() #9290 Test AND for() #9286 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 3
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0570; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 273; Test 'if'
SETR d2,LINKX; if() #9290 Body Start
PUSHR d2
ADDV d2,1
PUSHR d2
POP d2
SETR LINKX,d2
POP d2
LOADD d2,2
PUSHR d2
SUBV d2,1
STORED d2,2
POP d2
GOTO 299; if() #9290 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #9292 Test AND if() #9290 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 297; Test 'if'
LOADD d2,1; if() #9292 Body Start
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0998; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,1; if() #9292 Body End
SETV d2,0
STORED d2,2; if() #9290 Else End
LOADD d2,0; for() #9286 Body End AND for() #9286 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 235; for() #9286 End
LOADD d2,1; if() #9278 Body End AND InlineFunc[int Abs(int)] Params AND if() #9293 Test
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 456; Test 'if'
SETV d2,0; for() #9294 setup AND if() #9293 Body Start
STORED d2,0
LOADD d2,0; for() #9294 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 326
LOADD d2,1
COMPAREV d2,-1
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 385; for() #9294 TestFail?
PUSHR d4; if() #9298 Test AND for() #9294 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHV 0
PUSHV 1
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0570; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 353; Test 'if'
SETR d2,LINKY; if() #9298 Body Start
PUSHR d2
SUBV d2,1
PUSHR d2
POP d2
SETR LINKY,d2
POP d2
LOADD d2,1
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 379; if() #9298 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #9300 Test AND if() #9298 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 377; Test 'if'
LOADD d2,2; if() #9300 Body Start
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0998; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,1; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2; if() #9300 Body End
SETV d2,0
STORED d2,1; if() #9298 Else End
LOADD d2,0; for() #9294 Body End AND for() #9294 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 315; for() #9294 End
SETV d2,0; for() #9301 setup
STORED d2,0
LOADD d2,0; for() #9301 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 398
LOADD d2,1
COMPAREV d2,1
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 456; for() #9301 TestFail?
PUSHR d4; if() #9305 Test AND for() #9301 Body Start
PUSHR LINKX; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params Start
PUSHR LINKY
PUSHARGSV 1,0.0002
PUSHV 0; UsrFunc[bool CanWalk(int, int, int, int, bool)] Params End
CALLFUNC 0.0570; UsrFunc[bool CanWalk(int, int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 424; Test 'if'
SETR d2,LINKY; if() #9305 Body Start
PUSHR d2
ADDV d2,1
PUSHR d2
POP d2
SETR LINKY,d2
POP d2
LOADD d2,1
PUSHR d2
SUBV d2,1
STORED d2,1
POP d2
GOTO 450; if() #9305 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params AND if() #9307 Test AND if() #9305 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 448; Test 'if'
LOADD d2,2; if() #9307 Body Start
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.0998; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
LOADD d2,1; InlineFunc[int Abs(int)] Params Start
DIVV d2,2; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2; if() #9307 Body End
SETV d2,0
STORED d2,1; if() #9305 Else End
LOADD d2,0; for() #9301 Body End AND for() #9301 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 387; for() #9301 End
LOADD d2,3; if() #9293 Body End AND if() #9308 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 468; Test 'if'
LOADD d2,3; if() #9308 Body Start
PUSHR d2
SUBV d2,1
STORED d2,3
POP d2; if() #9308 Body End
LOADD d2,6
PUSHR d2
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,4; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #9272 Body [Opt:AlwaysOn] End
GOTO 32; while() #9272 End
POPARGS d5,0.0009
RETURNFUNC; void run(int) Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int DirNormal(int)] Body Start
LOADD d2,0; if() #4298 Test
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 508
LOADD d2,0
COMPAREV d2,15
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 513; Test 'if'
LOADD d2,0; return Start AND if() #4298 Body Start
GOTO 548; return End AND if() #4298 Body End
LOADD d2,0; switch() #4300 Key
SETR SWITCHKEY,d2; Store key
COMPAREV SWITCHKEY,8
GOTOTRUE 532; case '80000'
COMPAREV SWITCHKEY,9
GOTOTRUE 534; case '90000'
COMPAREV SWITCHKEY,10
GOTOTRUE 536; case '100000'
COMPAREV SWITCHKEY,11
GOTOTRUE 538; case '110000'
COMPAREV SWITCHKEY,12
GOTOTRUE 540; case '120000'
COMPAREV SWITCHKEY,13
GOTOTRUE 542; case '130000'
COMPAREV SWITCHKEY,14
GOTOTRUE 544; case '140000'
COMPAREV SWITCHKEY,15
GOTOTRUE 546; case '150000'
GOTO 548; switch() #4300 NoMatch
SETV d2,0; Case block AND return Start
GOTO 548; return End
SETV d2,5; Case block AND return Start
GOTO 548; return End
SETV d2,3; Case block AND return Start
GOTO 548; return End
SETV d2,7; Case block AND return Start
GOTO 548; return End
SETV d2,1; Case block AND return Start
GOTO 548; return End
SETV d2,6; Case block AND return Start
GOTO 548; return End
SETV d2,2; Case block AND return Start
GOTO 548; return End
SETV d2,4; Case block AND return Start
GOTO 548; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int DirNormal(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
GOTO 568; return End
POPARGS d5,0.0004
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSR d2,0.0004; Func[bool CanWalk(int, int, int, int, bool)] Body Start
SETR d4,SP
SETV d2,8
STORED d2,3
LOADD d2,8
ADDV d2,15
STORED d2,2
LOADD d2,7
ADDV d2,15
STORED d2,1
LOADD d2,4; if() #3622 Test
COMPAREV d2,0
GOTOTRUE 585; Test 'if'
SETV d2,0; if() #3622 Body Start
STORED d2,3; if() #3622 Body End
PUSHR d4; switch() #3623 Key
LOADD d2,6; UsrFunc[int DirNormal(int)] Params Start
PUSHR d2; UsrFunc[int DirNormal(int)] Params End
CALLFUNC 0.0493; UsrFunc[int DirNormal(int)] Call
POP d4
SETR SWITCHKEY,d2; Store key
COMPAREV SWITCHKEY,0
GOTOTRUE 600; case '0'
COMPAREV SWITCHKEY,1
GOTOTRUE 671; case '10000'
COMPAREV SWITCHKEY,2
GOTOTRUE 727; case '20000'
COMPAREV SWITCHKEY,3
GOTOTRUE 794; case '30000'
GOTO 858; switch() #3623 NoMatch
LOADD d2,7; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 628
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 648
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 667
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
SETTRUEI d2
GOTO 871; return End
LOADD d2,1; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
COMPAREV d2,176
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 692
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 708
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 723
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
SETTRUEI d2
GOTO 871; return End
LOADD d2,8; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d2,d3
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 755
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 775
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
ADDV d2,7
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 790
LOADD d2,8; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
SETTRUEI d2
GOTO 871; return End
LOADD d2,2; Case block AND return Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
COMPAREV d2,256
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 819
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 839
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
ADDV d2,7
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 854
LOADD d2,2; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
SETTRUEI d2
GOTO 871; return End
ALLOCATEMEMV d2,60; Case block
STORED d2,0
WRITEPODSTRING d2,"Invalid direction %d passed to CanWalk(x,y,dir,step,bool) \n"
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,6
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d3,0
DEALLOCATEMEMR d3
SETV d2,0; return Start
GOTO 871; return End
POPARGS d5,0.0009
RETURNFUNC; Func[bool CanWalk(int, int, int, int, bool)] Body End
SETR d4,SP; Func[int CenterLinkX()] Body Start
SETR d2,LINKX; return Start
ADDV d2,8
GOTO 877; return End
RETURNFUNC; Func[int CenterLinkX()] Body End
SETR d4,SP; Func[int CenterLinkY()] Body Start
SETR d2,LINKY; return Start
ADDV d2,8
GOTO 882; return End
RETURNFUNC; Func[int CenterLinkY()] Body End
SETR d4,SP; Func[int CenterX(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,X
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 905; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int CenterX(FFC)] Body End
SETR d4,SP; Func[int CenterY(FFC)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFFFC
SETR d2,Y
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 929; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int CenterY(FFC)] Body End
PUSHR d2; Func[void NoAction()] Body Start
SETR d4,SP
SETV d2,0; for() #6186 setup
STORED d2,0
LOADD d2,0; for() #6186 LoopTest
COMPAREV d2,14
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 974; for() #6186 TestFail?
LOADD d2,0; if() #6189 Test AND for() #6186 Body Start
COMPAREV d2,9
SETTRUEI d2
SETV d2,0
COMPAREV d2,0
GOTOTRUE 949; Test 'if'
GOTO 970; continue #6188 AND if() #6189 Body
LOADD d2,0; if() #6190 Test
COMPAREV d2,6
SETTRUEI d2
SETV d2,0
COMPAREV d2,0
GOTOTRUE 956; Test 'if'
GOTO 970; continue #6188 AND if() #6190 Body
SETV d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR BUTTONINPUT,d2
SETV d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
POP d0
POP d2
SETR BUTTONPRESS,d2; for() #6186 Body End
LOADD d2,0; for() #6186 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 935; for() #6186 End
POPARGS d5,0.0001
RETURNFUNC; Func[void NoAction()] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 985; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 996; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int VectorY(int, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #7487 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1008; Test 'if'
SETV d2,1; return Start AND if() #7487 Body Start
GOTO 1019; return End AND if() #7487 Body End
LOADD d2,0; if() #7489 Test AND if() #7487 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1017; Test 'if'
SETV d2,-1; return Start AND if() #7489 Body Start
GOTO 1019; return End AND if() #7489 Body End
SETV d2,0; return Start AND if() #7489 Else Start
GOTO 1019; return End AND if() #7489 Else End
POPARGS d5,0.0001; if() #7487 Else End
RETURNFUNC; Func[int Sign(int)] Body End


ALLOCATEGMEMV d2,4096; void run() Body Start
SETR gd1,d2
QUIT; void run() Body End


Compiling 'armos.zs'
Pass 1: Parsing
Pass 2: Preprocessing
Pass 3: Registration
Pass 4: Analyzing Code
Pass 5: Generating object code
Pass 6: Assembling
Success!
Compile finished with exit code '0' (success)

PUSHR d0; void run(int) Params
PUSHR REFFFC; void run(int) Body Start
PUSHARGSR d2,0.0003
SETR d4,SP
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
PUSHR d4
LOADD d2,3; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Params End
CALLFUNC 0.4394; UsrFunc[NPC Ghost_InitAutoGhost(FFC, int)] Call
POP d4
STORED d2,2
PUSHR d4
PUSHV 89; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3281; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 3; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3281; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 16384; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3281; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
PUSHR d4
LOADD d2,3; UsrFunc[void SpawnAnimation(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void SpawnAnimation(FFC, NPC)] Params End
CALLFUNC 0.5944; UsrFunc[void SpawnAnimation(FFC, NPC)] Call
POP d4
LOADD d2,2
PUSHR d2
POP REFNPC
SETR d2,NPCSTEP
DIVV d2,100
STORED d2,1
LOADD d2,2
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,0
SETR d2,gd4; if() #11074 Test AND while(true) #11072 Body [Opt:AlwaysOn] Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 67
SETR d2,gd6
COMPAREV d2,0
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 75; Test 'if'
SETV d2,1.5000; if() #11074 Body Start
SETR gd6,d2
LOADD d2,0; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #11074 Body End
PUSHR d4
LOADD d2,1; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void Ghost_MoveTowardLink(int, int)] Params End
CALLFUNC 0.4567; UsrFunc[void Ghost_MoveTowardLink(int, int)] Call
PEEK d4
LOADD d2,3; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.4635; UsrFunc[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Call
POP d4; while(true) #11072 Body [Opt:AlwaysOn] End
GOTO 58; while() #11072 End
POPARGS d5,0.0005
RETURNFUNC; void run(int) Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
GOTO 109; return End
POPARGS d5,0.0004
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
SETR d4,SP; Func[int AngleDir8(int)] Body Start
LOADD d2,0; if() #3571 Test
COMPAREV d2,157.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 123
LOADD d2,0
COMPAREV d2,112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 129; Test 'if'
SETV d2,6; return Start AND if() #3571 Body Start
GOTO 233; return End AND if() #3571 Body End
LOADD d2,0; if() #3574 Test AND if() #3571 Else Start
COMPAREV d2,112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 140
LOADD d2,0
COMPAREV d2,67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 146; Test 'if'
SETV d2,1; return Start AND if() #3574 Body Start
GOTO 233; return End AND if() #3574 Body End
LOADD d2,0; if() #3577 Test AND if() #3574 Else Start
COMPAREV d2,67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 157
LOADD d2,0
COMPAREV d2,22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 163; Test 'if'
SETV d2,7; return Start AND if() #3577 Body Start
GOTO 233; return End AND if() #3577 Body End
LOADD d2,0; if() #3580 Test AND if() #3577 Else Start
COMPAREV d2,22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 174
LOADD d2,0
COMPAREV d2,-22.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 180; Test 'if'
SETV d2,3; return Start AND if() #3580 Body Start
GOTO 233; return End AND if() #3580 Body End
LOADD d2,0; if() #3583 Test AND if() #3580 Else Start
COMPAREV d2,-22.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 191
LOADD d2,0
COMPAREV d2,-67.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 197; Test 'if'
SETV d2,5; return Start AND if() #3583 Body Start
GOTO 233; return End AND if() #3583 Body End
LOADD d2,0; if() #3586 Test AND if() #3583 Else Start
COMPAREV d2,-67.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 208
LOADD d2,0
COMPAREV d2,-112.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 214; Test 'if'
SETV d2,0; return Start AND if() #3586 Body Start
GOTO 233; return End AND if() #3586 Body End
LOADD d2,0; if() #3589 Test AND if() #3586 Else Start
COMPAREV d2,-112.5000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 225
LOADD d2,0
COMPAREV d2,-157.5000
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 231; Test 'if'
SETV d2,4; return Start AND if() #3589 Body Start
GOTO 233; return End AND if() #3589 Body End
SETV d2,2; return Start AND if() #3589 Else Start
GOTO 233; return End AND if() #3589 Else End
POPARGS d5,0.0001; if() #3586 Else End AND if() #3583 Else End AND if() #3580 Else End AND if() #3577 Else End AND if() #3574 Else End AND if() #3571 Else End
RETURNFUNC; Func[int AngleDir8(int)] Body End
SETR d4,SP; Func[int Clamp(int, int, int)] Body Start
LOADD d2,2; if() #3880 Test
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 249; Test 'if'
LOADD d2,1; if() #3880 Body Start
STORED d2,2
GOTO 261; if() #3880 Body End
LOADD d2,2; if() #3882 Test AND if() #3880 Else Start
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 261; Test 'if'
LOADD d2,0; if() #3882 Body Start
STORED d2,2; if() #3882 Body End
LOADD d2,2; if() #3880 Else End AND return Start
GOTO 263; return End
POPARGS d5,0.0003
RETURNFUNC; Func[int Clamp(int, int, int)] Body End
SETR d4,SP; Func[bool ClockIsActive()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETFALSEI d2
RETURNFUNC; Func[bool ClockIsActive()] Body End
SETR d4,SP; Func[int ComboAt(int, int)] Body Start
PUSHR d4
LOADD d2,1; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 255
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0300; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,1
PUSHR d4
LOADD d2,0; UsrFunc[int VBound(int, int, int)] Params Start
PUSHR d2
PUSHV 175
PUSHV 0; UsrFunc[int VBound(int, int, int)] Params End
CALLFUNC 0.0300; UsrFunc[int VBound(int, int, int)] Call
POP d4
STORED d2,0
LOADD d2,0; return Start
ANDV d2,240
PUSHR d2
LOADD d2,1
RSHIFTV d2,4
POP d3
ADDR d2,d3
GOTO 298; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int ComboAt(int, int)] Body End
SETR d4,SP; Func[int VBound(int, int, int)] Body Start
LOADD d2,2; if() #8793 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 314; Test 'if'
LOADD d2,0; if() #8793 Body Start
STORED d2,2
GOTO 326; if() #8793 Body End
LOADD d2,2; if() #8795 Test AND if() #8793 Else Start
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 326; Test 'if'
LOADD d2,1; if() #8795 Body Start
STORED d2,2; if() #8795 Body End
LOADD d2,2; if() #8793 Else End AND return Start
GOTO 328; return End
POPARGS d5,0.0003
RETURNFUNC; Func[int VBound(int, int, int)] Body End
PUSHR d2; Func[bool IsWater(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6289 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 344; Test 'if'
SETV d2,1; return Start AND if() #6289 Body Start
GOTO 375; return End AND if() #6289 Body End
LOADD d2,0; if() #6290 Test
COMPAREV d2,18
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 351; Test 'if'
SETV d2,1; return Start AND if() #6290 Body Start
GOTO 375; return End AND if() #6290 Body End
LOADD d2,0; if() #6291 Test
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 358; Test 'if'
SETV d2,1; return Start AND if() #6291 Body Start
GOTO 375; return End AND if() #6291 Body End
LOADD d2,0; if() #6292 Test
COMPAREV d2,86
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 367
LOADD d2,0
COMPAREV d2,91
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 373; Test 'if'
SETV d2,1; return Start AND if() #6292 Body Start
GOTO 375; return End AND if() #6292 Body End
SETV d2,0; return Start
GOTO 375; return End
POPARGS d5,0.0002
RETURNFUNC; Func[bool IsWater(int)] Body End
SETR d4,SP; Func[bool __IsPit(int)] Body Start
PUSHR d4; return Start
LOADD d2,0; UsrFunc[bool IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool IsPit(int)] Params End
CALLFUNC 0.5888; UsrFunc[bool IsPit(int)] Call
POP d4
GOTO 384; return End
POPARGS d5,0.0001
RETURNFUNC; Func[bool __IsPit(int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int)] Body Start
PUSHR d4; return Start
LOADD d2,2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
GOTO 403; return End
POPARGS d5,0.0003
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int)] Body End
SETR d4,SP; Func[bool Ghost_CanMove(int, int, int, bool)] Body Start
LOADD d2,2; if() #5318 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 413; Test 'if'
SETV d2,1; return Start AND if() #5318 Body Start
GOTO 466; return End AND if() #5318 Body End
LOADD d2,3; if() #5319 Test
COMPAREV d2,4
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 421; Test 'if'
LOADD d2,2; if() #5319 Body Start
MULTV d2,0.7071
STORED d2,2; if() #5319 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.0468; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,3
LOADD d2,2; while() #5321 Test
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 454; Test 'while'
PUSHR d4; unless() #5323 Test AND while() #5321 Body Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0544; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 450; Test 'unless'
SETV d2,0; return Start AND unless() #5323 Body Start
GOTO 466; return End AND unless() #5323 Body End
LOADD d2,2
SUBV d2,8
STORED d2,2; while() #5321 Body End
GOTO 427; while() #5321 End
PUSHR d4; return Start
LOADD d2,3; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Params End
CALLFUNC 0.0544; UsrFunc[bool __Ghost_CanMoveSingle(int, int, int, bool)] Call
POP d4
GOTO 466; return End
POPARGS d5,0.0004
RETURNFUNC; Func[bool Ghost_CanMove(int, int, int, bool)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #9271 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 478
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 484; Test 'if'
LOADD d2,0; return Start AND if() #9271 Body Start
GOTO 542; return End AND if() #9271 Body End
LOADD d2,0; if() #9273 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 491; Test 'if'
SETV d2,0; return Start AND if() #9273 Body Start
GOTO 542; return End AND if() #9273 Body End
LOADD d2,0; if() #9274 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 498; Test 'if'
SETV d2,5; return Start AND if() #9274 Body Start
GOTO 542; return End AND if() #9274 Body End
LOADD d2,0; if() #9275 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 505; Test 'if'
SETV d2,3; return Start AND if() #9275 Body Start
GOTO 542; return End AND if() #9275 Body End
LOADD d2,0; if() #9276 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 512; Test 'if'
SETV d2,7; return Start AND if() #9276 Body Start
GOTO 542; return End AND if() #9276 Body End
LOADD d2,0; if() #9277 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 519; Test 'if'
SETV d2,1; return Start AND if() #9277 Body Start
GOTO 542; return End AND if() #9277 Body End
LOADD d2,0; if() #9278 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 526; Test 'if'
SETV d2,6; return Start AND if() #9278 Body Start
GOTO 542; return End AND if() #9278 Body End
LOADD d2,0; if() #9279 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 533; Test 'if'
SETV d2,2; return Start AND if() #9279 Body Start
GOTO 542; return End AND if() #9279 Body End
LOADD d2,0; if() #9280 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 540; Test 'if'
SETV d2,4; return Start AND if() #9280 Body Start
GOTO 542; return End AND if() #9280 Body End
SETV d2,0; return Start
GOTO 542; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
PUSHARGSR d2,0.0006; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,9; if() #9019 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 680; Test 'if'
SETR d2,gd14; if() #9019 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9021 setup
STORED d2,5
LOADD d2,5; for() #9021 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 638; for() #9021 TestFail?
PUSHR d4; unless() #9024 Test AND for() #9021 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 632; Test 'unless'
SETV d2,0; return Start AND unless() #9024 Body Start
GOTO 1342; return End AND unless() #9024 Body End
LOADD d2,5; for() #9021 Body End AND for() #9021 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 606; for() #9021 End
PUSHR d4; unless() #9025 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 655; Test 'unless'
SETV d2,0; return Start AND unless() #9025 Body Start
GOTO 1342; return End AND unless() #9025 Body End
PUSHR d4; unless() #9026 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 678; Test 'unless'
SETV d2,0; return Start AND unless() #9026 Body Start
GOTO 1342; return End AND unless() #9026 Body End
SETV d2,1; return Start
GOTO 1342; return End AND if() #9019 Body End
LOADD d2,9; if() #9027 Test AND if() #9019 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 815; Test 'if'
SETR d2,gd14; if() #9027 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd2
PUSHR d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9029 setup
STORED d2,5
LOADD d2,5; for() #9029 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 773; for() #9029 TestFail?
PUSHR d4; unless() #9032 Test AND for() #9029 Body Start
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 767; Test 'unless'
SETV d2,0; return Start AND unless() #9032 Body Start
GOTO 1342; return End AND unless() #9032 Body End
LOADD d2,5; for() #9029 Body End AND for() #9029 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 741; for() #9029 End
PUSHR d4; unless() #9033 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 790; Test 'unless'
SETV d2,0; return Start AND unless() #9033 Body Start
GOTO 1342; return End AND unless() #9033 Body End
PUSHR d4; unless() #9034 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 813; Test 'unless'
SETV d2,0; return Start AND unless() #9034 Body Start
GOTO 1342; return End AND unless() #9034 Body End
SETV d2,1; return Start
GOTO 1342; return End AND if() #9027 Body End
LOADD d2,9; if() #9035 Test AND if() #9027 Else Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 957; Test 'if'
PUSHR d4; if() #9037 Test AND if() #9035 Body Start
CALLFUNC 0.4615; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 832
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 838; Test 'if'
SETV d2,0; return Start AND if() #9037 Body Start
GOTO 1342; return End AND if() #9037 Body End
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd24
RSHIFTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9039 setup
STORED d2,5
LOADD d2,5; for() #9039 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 915; for() #9039 TestFail?
PUSHR d4; unless() #9042 Test AND for() #9039 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 909; Test 'unless'
SETV d2,0; return Start AND unless() #9042 Body Start
GOTO 1342; return End AND unless() #9042 Body End
LOADD d2,5; for() #9039 Body End AND for() #9039 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 883; for() #9039 End
PUSHR d4; unless() #9043 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 932; Test 'unless'
SETV d2,0; return Start AND unless() #9043 Body Start
GOTO 1342; return End AND unless() #9043 Body End
PUSHR d4; unless() #9044 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 955; Test 'unless'
SETV d2,0; return Start AND unless() #9044 Body Start
GOTO 1342; return End AND unless() #9044 Body End
SETV d2,1; return Start
GOTO 1342; return End AND if() #9035 Body End
LOADD d2,9; if() #9045 Test AND if() #9035 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1092; Test 'if'
SETR d2,gd13; if() #9045 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
STORED d2,4
SETR d2,gd2
PUSHR d2
SETR d2,gd23
RSHIFTV d2,8
POP d3
ADDR d2,d3
STORED d2,2
LOADD d2,3
DIVV d2,8
SUBV d2,1
STORED d2,1
SETV d2,1; for() #9047 setup
STORED d2,5
LOADD d2,5; for() #9047 LoopTest
PUSHR d2
LOADD d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1050; for() #9047 TestFail?
PUSHR d4; unless() #9050 Test AND for() #9047 Body Start
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,5
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1044; Test 'unless'
SETV d2,0; return Start AND unless() #9050 Body Start
GOTO 1342; return End AND unless() #9050 Body End
LOADD d2,5; for() #9047 Body End AND for() #9047 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,5
POP d2
GOTO 1018; for() #9047 End
PUSHR d4; unless() #9051 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,7
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1067; Test 'unless'
SETV d2,0; return Start AND unless() #9051 Body Start
GOTO 1342; return End AND unless() #9051 Body End
PUSHR d4; unless() #9052 Test
LOADD d2,2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params Start
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,7
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Params End
CALLFUNC 0.1344; UsrFunc[bool Ghost_CanMovePixel(int, int, bool)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1090; Test 'unless'
SETV d2,0; return Start AND unless() #9052 Body Start
GOTO 1342; return End AND unless() #9052 Body End
SETV d2,1; return Start
GOTO 1342; return End AND if() #9045 Body End
LOADD d2,9; if() #9053 Test AND if() #9045 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1154; Test 'if'
SETV d2,0; if() #9053 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9055 Test
COMPAREV d2,0
GOTOFALSE 1128; Test 'unless'
SETV d2,0; return Start AND unless() #9055 Body Start
GOTO 1342; return End AND unless() #9055 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1342; return End AND if() #9053 Body End
LOADD d2,9; if() #9056 Test AND if() #9053 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1216; Test 'if'
SETV d2,0; if() #9056 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9058 Test
COMPAREV d2,0
GOTOFALSE 1190; Test 'unless'
SETV d2,0; return Start AND unless() #9058 Body Start
GOTO 1342; return End AND unless() #9058 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1342; return End AND if() #9056 Body End
LOADD d2,9; if() #9059 Test AND if() #9056 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1278; Test 'if'
SETV d2,0; if() #9059 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9061 Test
COMPAREV d2,0
GOTOFALSE 1252; Test 'unless'
SETV d2,0; return Start AND unless() #9061 Body Start
GOTO 1342; return End AND unless() #9061 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1342; return End AND if() #9059 Body End
LOADD d2,9; if() #9062 Test AND if() #9059 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1340; Test 'if'
SETV d2,0; if() #9062 Body Start
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd2,d2
PUSHR d4
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd2
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
LOADD d2,0; unless() #9064 Test
COMPAREV d2,0
GOTOFALSE 1314; Test 'unless'
SETV d2,0; return Start AND unless() #9064 Body Start
GOTO 1342; return End AND unless() #9064 Body End
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
ADDR d2,d3
SETR gd3,d2
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params Start
LOADD d2,8
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,6
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Params End
CALLFUNC 0.0405; UsrFunc[bool Ghost_CanMove(int, int, int, bool)] Call
POP d4
STORED d2,0
SETR d2,gd3
PUSHR d2
LOADD d2,8
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
LOADD d2,0; return Start
GOTO 1342; return End AND if() #9062 Body End
SETV d2,0; return Start AND if() #9062 Else Start
GOTO 1342; return End AND if() #9062 Else End
POPARGS d5,0.0010; if() #9059 Else End AND if() #9056 Else End AND if() #9053 Else End AND if() #9045 Else End AND if() #9035 Else End AND if() #9027 Else End AND if() #9019 Else End
RETURNFUNC; Func[bool __Ghost_CanMoveSingle(int, int, int, bool)] Body End
PUSHR d2; Func[bool Ghost_CanMovePixel(int, int, bool)] Body Start
SETR d4,SP
LOADD d2,3; if() #5329 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1360
LOADD d2,3
COMPAREV d2,255
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1370
LOADD d2,2
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1380
LOADD d2,2
COMPAREV d2,175
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1388; Test 'if'
PUSHR d4; return Start AND if() #5329 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1583; return End AND if() #5329 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0273; UsrFunc[int ComboAt(int, int)] Call
POP d4
STORED d2,0
PUSHR d4; unless() #5334 Test
PUSHV 65537; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1493; Test 'unless'
LOADD d2,0; if() #5335 Test AND unless() #5334 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,110
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1412; Test 'if'
SETV d2,0; return Start AND if() #5335 Body Start
GOTO 1583; return End AND if() #5335 Body End
LOADD d2,0; if() #5336 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1422; Test 'if'
SETV d2,0; return Start AND if() #5336 Body Start
GOTO 1583; return End AND if() #5336 Body End
LOADD d2,0; if() #5337 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,96
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1432; Test 'if'
SETV d2,0; return Start AND if() #5337 Body Start
GOTO 1583; return End AND if() #5337 Body End
PUSHR d4; if() #5338 Test
PUSHV 65536; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1449; Test 'if'
LOADD d2,0; if() #5340 Test AND if() #5338 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,44
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1448; Test 'if'
SETV d2,0; return Start AND if() #5340 Body Start
GOTO 1583; return End AND if() #5340 Body End
GOTO 1493; if() #5338 Body End
LOADD d2,1; if() #5341 Test AND if() #5338 Else Start
COMPAREV d2,0
GOTOTRUE 1463; Test 'if'
LOADD d2,0; if() #5343 Test AND if() #5341 Body Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,54
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1462; Test 'if'
SETV d2,0; return Start AND if() #5343 Body Start
GOTO 1583; return End AND if() #5343 Body End
GOTO 1493; if() #5341 Body End
LOADD d2,0; if() #5344 Test AND if() #5341 Else Start
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,128
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1473; Test 'if'
SETV d2,0; return Start AND if() #5344 Body Start
GOTO 1583; return End AND if() #5344 Body End
LOADD d2,0; if() #5345 Test
PUSHR d2
POP d0
SETR d2,COMBOFD
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1483; Test 'if'
SETV d2,0; return Start AND if() #5345 Body Start
GOTO 1583; return End AND if() #5345 Body End
LOADD d2,0; if() #5346 Test
PUSHR d2
POP d0
SETR d2,COMBOID
COMPAREV d2,97
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1493; Test 'if'
SETV d2,0; return Start AND if() #5346 Body Start
GOTO 1583; return End AND if() #5346 Body End
PUSHR d4; if() #5341 Else End AND if() #5338 Else End AND unless() #5334 Body End AND if() #5347 Test
PUSHV 65539; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1505; Test 'if'
PUSHR d4; return Start AND if() #5347 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0330; UsrFunc[bool IsWater(int)] Call
POP d4
GOTO 1583; return End AND if() #5347 Body End
PUSHR d4; if() #5348 Test
PUSHV 65538; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1528; Test 'if'
PUSHR d4; return Start AND if() #5348 Body Start
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0330; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0.0001
GOTOMORE 1526
LOADD d2,0
PUSHR d2
POP d0
SETR d2,COMBOTD
COMPAREV d2,58
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
GOTO 1583; return End AND if() #5348 Body End
PUSHR d4; if() #5350 Test
LOADD d2,0; UsrFunc[bool IsWater(int)] Params Start
PUSHR d2; UsrFunc[bool IsWater(int)] Params End
CALLFUNC 0.0330; UsrFunc[bool IsWater(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1540; Test 'if'
PUSHR d4; return Start AND if() #5350 Body Start
PUSHV 2048; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1583; return End AND if() #5350 Body End
PUSHR d4; if() #5351 Test
LOADD d2,0; UsrFunc[bool __IsPit(int)] Params Start
PUSHR d2; UsrFunc[bool __IsPit(int)] Params End
CALLFUNC 0.0377; UsrFunc[bool __IsPit(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1552; Test 'if'
PUSHR d4; return Start AND if() #5351 Body Start
PUSHV 4096; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1583; return End AND if() #5351 Body End
PUSHR d4; if() #5352 Test
PUSHV 1024; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1560; Test 'if'
SETV d2,1; return Start AND if() #5352 Body Start
GOTO 1583; return End AND if() #5352 Body End
PUSHR d4; if() #5354 Test AND if() #5352 Else Start
PUSHV 32768; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1574; Test 'if'
PUSHR d4; return Start AND if() #5354 Body Start
LOADD d2,3; UsrFunc[bool __FullTileWalkable(int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[bool __FullTileWalkable(int, int)] Params End
CALLFUNC 0.1617; UsrFunc[bool __FullTileWalkable(int, int)] Call
POP d4
GOTO 1583; return End AND if() #5354 Body End
LOADD d2,3; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND return Start AND if() #5354 Else Start
PUSHR d2
LOADD d2,2
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
SETTRUEI d2
GOTO 1583; return End AND if() #5354 Else End
POPARGS d5,0.0004; if() #5352 Else End
RETURNFUNC; Func[bool Ghost_CanMovePixel(int, int, bool)] Body End
SETR d4,SP; Func[bool Ghost_FlagIsSet(int)] Body Start
LOADD d2,0; if() #5512 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1604; Test 'if'
SETR d2,gd17; return Start AND if() #5512 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
GOTO 1615; return End AND if() #5512 Body End
SETR d2,gd16; return Start AND if() #5512 Else Start
PUSHR d2
LOADD d2,0
POP d3
ANDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
GOTO 1615; return End AND if() #5512 Else End
POPARGS d5,0.0001
RETURNFUNC; Func[bool Ghost_FlagIsSet(int)] Body End
SETR d4,SP; Func[bool __FullTileWalkable(int, int)] Body Start
LOADD d2,1; if() #8989 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1632
LOADD d2,0
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1640
LOADD d2,1
COMPAREV d2,256
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1648
LOADD d2,0
COMPAREV d2,176
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1656; Test 'if'
PUSHR d4; return Start AND if() #8989 Body Start
PUSHV 8192; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
GOTO 1721; return End AND if() #8989 Body End
LOADD d2,1
PUSHR d2
LOADD d2,1
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,0
MODV d2,16
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #8993 Test
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0.0001
GOTOMORE 1689
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1701
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1714
LOADD d2,1; InlineFunc[bool Screen->isSolid(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,0
ADDV d2,8
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1719; Test 'if'
SETV d2,0; return Start AND if() #8993 Body Start
GOTO 1721; return End AND if() #8993 Body End
SETV d2,1; return Start
GOTO 1721; return End
POPARGS d5,0.0002
RETURNFUNC; Func[bool __FullTileWalkable(int, int)] Body End
PUSHARGSR d2,0.0004; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body Start
SETR d4,SP
PUSHR d4; if() #5359 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1735
PUSHR d4
CALLFUNC 0.0265; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1758
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1754
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1995; Test 'if'
LOADD d2,5; if() #5359 Body Start
PUSHR d2
POP REFFFC
SETR d2,XD
STORED d2,3
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD
STORED d2,2
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,XD2
STORED d2,1
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,YD2
STORED d2,0
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETR d2,gd18
ORV d2,2
SETR gd18,d2
PUSHR d4; while() #5363 Test
PUSHV 16; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1830
PUSHR d4
CALLFUNC 0.0265; UsrFunc[bool ClockIsActive()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1853
PUSHR d4
PUSHV 8; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1849
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCSTUN
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1959; Test 'while'
PUSHR d4; while() #5363 Body Start
LOADD d2,5; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1999; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2087; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2271; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND unless() #5371 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 1880; Test 'unless'
SETV d2,0; return Start AND unless() #5371 Body Start
GOTO 1997; return End
GOTO 1890; unless() #5371 Body End
LOADD d2,4; if() #5373 Test AND unless() #5371 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1890; Test 'if'
SETV d2,0; return Start AND if() #5373 Body Start
GOTO 1997; return End AND if() #5373 Body End
PUSHR d4; unless() #5371 Else End
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1919; Test 'if'
SETR d2,gd11; if() #5375 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0468; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1951; if() #5375 Body End
PUSHR d4; if() #5377 Test AND if() #5375 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 1942; Test 'if'
SETR d2,gd11; if() #5377 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0468; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
GOTO 1951; if() #5377 Body End
SETR d2,gd11; if() #5377 Else Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #5377 Else End
PUSHR d4; if() #5375 Else End
LOADD d2,5; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2819; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
POP d4; while() #5363 Body End
GOTO 1820; while() #5363 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
LOADD d2,2
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
LOADD d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
LOADD d2,0
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2; if() #5359 Body End
SETV d2,1; return Start
GOTO 1997; return End
POPARGS d5,0.0006
RETURNFUNC; Func[bool Ghost_CheckFreeze(FFC, NPC)] Body End
PUSHR d2; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
SETR d2,gd21; if() #9199 Test
COMPAREV d2,1
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2020; Test 'if'
SETR d2,gd21; if() #9199 Body Start
PUSHR d2
SUBV d2,1
SETR gd21,d2
POP d2
SETR d2,gd21; if() #9200 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2020; Test 'if'
SETV d2,1; if() #9200 Body Start
STORED d2,0; if() #9200 Body End
SETR d2,gd18; if() #9199 Body End AND if() #9201 Test
ANDV d2,8
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2085; Test 'if'
SETR d2,gd21; if() #9202 Test AND if() #9201 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2049; Test 'if'
SETR d2,gd27; if() #9202 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
RSHIFTV d2,1
SUBV2 9,d2
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2085; if() #9202 Body End
LOADD d2,1; if() #9204 Test AND if() #9202 Else Start
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2073; Test 'if'
SETR d2,gd27; if() #9204 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,1
ANDV d2,3
ADDV d2,6
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 2085; if() #9204 Body End
LOADD d2,0; if() #9206 Test AND if() #9204 Else Start
COMPAREV d2,0
GOTOTRUE 2085; Test 'if'
SETR d2,gd12; if() #9206 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #9206 Body End
POPARGS d5,0.0003; if() #9204 Else End AND if() #9202 Else End AND if() #9201 Body End
RETURNFUNC; Func[void __Ghost_UpdateFlashing(FFC, NPC)] Body End
PUSHARGSR d2,0.0004; Func[void __Ghost_DrawShadow(NPC)] Body Start
SETR d4,SP
SETR d2,gd4; if() #9066 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2095; Test 'if'
GOTO 2269; return (Void) AND if() #9066 Body
PUSHR d4; unless() #9067 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLI d2
COMPAREV d2,0.0001
GOTOMORE 2110
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCEXTEND
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2121
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCTYPE
COMPAREV d2,40
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 2125; Test 'unless'
GOTO 2269; return (Void) AND unless() #9067 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
SETR d2,gd13; if() #9071 Test
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2147
SETR d2,gd14
COMPAREV d2,3
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2197; Test 'if'
SETR d2,gd2; if() #9071 Body Start
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,1
STORED d2,0
PUSHR d4; if() #9074 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2190; Test 'if'
SETV d2,27400; if() #9074 Body Start
STORED d2,1
GOTO 2196; if() #9074 Body End
SETR d2,gd27; if() #9074 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
STORED d2,1; if() #9074 Else End
GOTO 2251; if() #9071 Body End
SETR d2,gd2; if() #9071 Else Start
PUSHR d2
SETR d2,gd13
SUBV d2,2
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,2
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
SUBV d2,2
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
SETV d2,2
STORED d2,0
PUSHR d4; if() #9076 Test
PUSHV 65540; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 2236; Test 'if'
SETV d2,27392; if() #9076 Body Start
STORED d2,1
GOTO 2251; if() #9076 Body End
SETR d2,gd27; if() #9076 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,4
MULTV d2,2
SETV d2,2
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
POP d3
MULTR d2,d3
ADDV d2,27392
STORED d2,1; if() #9076 Else End
PUSHV 1; if() #9071 Else End AND InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #9078 [Opt:AlwaysOn]
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_DrawShadow(NPC)] Body End
PUSHARGSR d2,0.0004; Func[void Ghost_WaitframeLight(FFC, NPC)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,24
STORED d2,2
SETR d0,d2
PUSHR d0
SETR d2,gd2
POP d0
WRITEPODARRAYVR 0,d2
PUSHR d0
SETR d2,gd3
POP d0
WRITEPODARRAYVR 1,d2
PUSHR d0
SETR d2,gd4
POP d0
WRITEPODARRAYVR 2,d2
PUSHR d0
SETR d2,gd6
POP d0
WRITEPODARRAYVR 3,d2
PUSHR d0
SETR d2,gd7
POP d0
WRITEPODARRAYVR 4,d2
PUSHR d0
SETR d2,gd8
POP d0
WRITEPODARRAYVR 5,d2
PUSHR d0
SETR d2,gd9
POP d0
WRITEPODARRAYVR 6,d2
PUSHR d0
SETR d2,gd10
POP d0
WRITEPODARRAYVR 7,d2
PUSHR d0
SETR d2,gd19
POP d0
WRITEPODARRAYVR 8,d2
PUSHR d0
SETR d2,gd20
POP d0
WRITEPODARRAYVR 9,d2
PUSHR d0
SETR d2,gd12
POP d0
WRITEPODARRAYVR 10,d2
PUSHR d0
SETR d2,gd5
POP d0
WRITEPODARRAYVR 11,d2
PUSHR d0
SETR d2,gd11
POP d0
WRITEPODARRAYVR 12,d2
PUSHR d0
SETR d2,gd13
POP d0
WRITEPODARRAYVR 13,d2
PUSHR d0
SETR d2,gd14
POP d0
WRITEPODARRAYVR 14,d2
PUSHR d0
SETR d2,gd16
POP d0
WRITEPODARRAYVR 15,d2
PUSHR d0
SETR d2,gd17
POP d0
WRITEPODARRAYVR 16,d2
PUSHR d0
SETR d2,gd18
POP d0
WRITEPODARRAYVR 17,d2
PUSHR d0
SETR d2,gd21
POP d0
WRITEPODARRAYVR 18,d2
PUSHR d0
SETR d2,gd22
POP d0
WRITEPODARRAYVR 19,d2
PUSHR d0
SETR d2,gd15
POP d0
WRITEPODARRAYVR 20,d2
PUSHR d0
SETR d2,gd23
POP d0
WRITEPODARRAYVR 21,d2
PUSHR d0
SETR d2,gd24
POP d0
WRITEPODARRAYVR 22,d2
ALLOCATEMEMV d2,21
STORED d2,1
SETR d2,gd26; if() #5852 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2408; Test 'if'
SETV d2,0; for() #5853 setup AND if() #5852 Body Start
STORED d2,0
LOADD d2,0; for() #5853 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2408; for() #5853 TestFail?
SETR d2,gd26; for() #5853 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #5853 Body End
LOADD d2,0; for() #5853 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2382; for() #5853 End
LOADD d2,4; if() #5852 Body End AND InlineFunc[bool NPC->isValid()] Params AND if() #5856 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2425; Test 'if'
LOADD d2,2; if() #5856 Body Start
ORV d2,65536
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #5856 Body End
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #5860 Test AND do-while() #5857 Body Start
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2489; Test 'if'
SETR d2,gd26; if() #5863 Test AND if(true) #5862 [Opt:AlwaysOn] AND if() #5860 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2464; Test 'if'
ALLOCATEMEMV d2,34; if() #5863 Body Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5571; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5860; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 2488; if() #5863 Body End
ALLOCATEMEMV d2,10; if() #5863 Else Start
STORED d2,0
PUSHR d4
LOADD d2,5; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Params End
CALLFUNC 0.5571; UsrFunc[void __SetUpDrawingArray(FFC, NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
LOADD d2,2
SETR d0,d2
POP d2
WRITEPODARRAYVR 23,d2
PUSHR d4
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5860; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4
LOADD d3,0
DEALLOCATEMEMR d3; if() #5863 Else End
GOTO 2494; if() #5860 Body End
PUSHR d4; if() #5860 Else Start
LOADD d2,5; UsrFunc[void __HideFFCAndWait(FFC)] Params Start
PUSHR d2; UsrFunc[void __HideFFCAndWait(FFC)] Params End
CALLFUNC 0.5860; UsrFunc[void __HideFFCAndWait(FFC)] Call
POP d4; if() #5860 Else End
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,0
SETR gd2,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,1
SETR gd3,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,2
SETR gd4,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,3
SETR gd6,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,4
SETR gd7,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,5
SETR gd8,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,6
SETR gd9,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,7
SETR gd10,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,8
SETR gd19,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,9
SETR gd20,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,10
SETR gd12,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,11
SETR gd5,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,12
SETR gd11,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,13
SETR gd13,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,14
SETR gd14,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,15
SETR gd16,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,16
SETR gd17,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,17
SETR gd18,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,18
SETR gd21,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,19
SETR gd22,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,20
SETR gd15,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,21
SETR gd23,d2
LOADD d2,2
PUSHR d2
POP d0
READPODARRAYV d2,22
SETR gd24,d2
LOADD d2,1; if() #5867 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2648; Test 'if'
SETV d2,0; for() #5869 setup AND if() #5867 Body Start
STORED d2,0
LOADD d2,0; for() #5869 LoopTest
COMPAREV d2,21
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2647; for() #5869 TestFail?
LOADD d2,1; for() #5869 Body Start
PUSHR d2
LOADD d2,0
POP d0
READPODARRAYR d2,d2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,0
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2; for() #5869 Body End
LOADD d2,0; for() #5869 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 2621; for() #5869 End
GOTO 2654; if() #5867 Body End
SETV d2,0; if() #5867 Else Start
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #5867 Else End
SETR d2,gd27; do-while() #5857 Body End AND do-while() #5857 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2664; Test 'while'
GOTO 2425
LOADD d2,4; InlineFunc[bool NPC->isValid()] Params AND if() #5872 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOTRUE 2680; Test 'if'
SETV d2,65536; if() #5872 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #5872 Body End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
POPARGS d5,0.0006
RETURNFUNC; Func[void Ghost_WaitframeLight(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_SetPosition(FFC, NPC)] Body Start
LOADD d2,0; InlineFunc[bool NPC->isValid()] Params AND unless() #5744 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 2692; Test 'unless'
GOTO 2817; return (Void) AND unless() #5744 Body
PUSHR d4; if() #5745 Test
PUSHV 16384; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 2729; Test 'if'
SETR d2,gd2; if() #5745 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
GOTO 2761; if() #5745 Body End
SETR d2,gd2; if() #5745 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2; if() #5745 Else End
PUSHR d4
SETR d2,gd2; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
PUSHR d2
PUSHV -64
PUSHV 256; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0235; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
SETR d2,gd3; UsrFunc[int Clamp(int, int, int)] Params Start
PUSHR d2
SETR d2,gd4
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
SUBR d3,d2
PUSHR d3
PUSHV -64
PUSHV 176; UsrFunc[int Clamp(int, int, int)] Params End
CALLFUNC 0.0235; UsrFunc[int Clamp(int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void Ghost_SetPosition(FFC, NPC)] Body End
PUSHARGSR d2,0.0005; Func[void Ghost_CheckHit(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5; if() #5381 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
PUSHR d2
SETR d2,gd15
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3035; Test 'if'
SETR d2,gd18; if() #5381 Body Start
ORV d2,1
SETR gd18,d2
LOADD d2,5
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETR d2,gd21; if() #5382 Test
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2851; Test 'if'
SETV d2,32; if() #5382 Body Start
SETR gd21,d2; if() #5382 Body End
PUSHR d4; if() #5383 Test
PUSHV 1; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3035; Test 'if'
SETR d2,LINKX; if() #5383 Body Start
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,4
SETR d2,LINKY
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,3
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5384 Test
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd13
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2896
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
SETR d2,gd14
ADDV d2,1
MULTV d2,16
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2934; Test 'if'
SETR d2,LINKDIR; if() #5387 Test AND if() #5384 Body Start
ANDV d2,2
PUSHR d2
SETR d2,gd5
ANDV d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2917
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2926
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2933; Test 'if'
SETR d2,LINKDIR; if() #5387 Body Start
LSHIFTV d2,12
ORV d2,16
SETR gd22,d2; if() #5387 Body End
GOTO 3035; if() #5384 Body End
LOADD d2,4; InlineFunc[int Abs(int)] Params AND if() #5390 Test AND if() #5384 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,3; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2991; Test 'if'
SETR d2,gd5; if() #5392 Test AND if() #5390 Body Start
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2956
SETR d2,gd5
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2966
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2975
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2990; Test 'if'
LOADD d2,3; if() #5396 Test AND if() #5392 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2988; Test 'if'
SETV d2,16; if() #5396 Body Start
SETR gd22,d2
GOTO 2990; if() #5396 Body End
SETV d2,4112; if() #5396 Else Start
SETR gd22,d2; if() #5396 Else End
GOTO 3035; if() #5392 Body End AND if() #5390 Body End
SETR d2,gd5; if() #5398 Test AND if() #5390 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3001
SETR d2,gd5
COMPAREV d2,3
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3011
SETR d2,gd5
COMPAREV d2,3
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 3020
PUSHR d4
PUSHV 3; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3035; Test 'if'
LOADD d2,4; if() #5402 Test AND if() #5398 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3033; Test 'if'
SETV d2,8208; if() #5402 Body Start
SETR gd22,d2
GOTO 3035; if() #5402 Body End
SETV d2,12304; if() #5402 Else Start
SETR gd22,d2; if() #5402 Else End
SETR d2,gd22; if() #5398 Body End AND if() #5390 Else End AND if() #5384 Else End AND if() #5383 Body End AND if() #5381 Body End AND if() #5404 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3271; Test 'if'
SETR d2,gd22; if() #5404 Body Start
RSHIFTV d2,12
STORED d2,4
SETR d2,gd22
ANDV d2,4095
STORED d2,3
SETV d2,4
STORED d2,2
PUSHR d4; if() #5405 Test
PUSHV 5; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3057; Test 'if'
LOADD d2,2; if() #5405 Body Start
DIVV d2,2
STORED d2,2; if() #5405 Body End
PUSHR d4; if() #5406 Test
LOADD d2,4; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHR d2
LOADD d2,2
PUSHR d2
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3171; Test 'if'
SETV d2,0; if() #5406 Body Start
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,3
PUSHR d2
SUBV d2,1
STORED d2,3
POP d2
LOADD d2,3; if() #5408 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3091; Test 'if'
LOADD d2,4; if() #5408 Body Start
LSHIFTV d2,12
PUSHR d2
LOADD d2,3
POP d3
ORR d2,d3
SETR gd22,d2
GOTO 3093; if() #5408 Body End
SETV d2,0; if() #5408 Else Start
SETR gd22,d2; if() #5408 Else End
LOADD d2,4; if() #5410 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3102; Test 'if'
LOADD d2,2; if() #5410 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 3121; if() #5410 Body End
LOADD d2,4; if() #5412 Test AND if() #5410 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3110; Test 'if'
LOADD d2,2; if() #5412 Body Start
STORED d2,0
GOTO 3121; if() #5412 Body End
LOADD d2,4; if() #5414 Test AND if() #5412 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3119; Test 'if'
LOADD d2,2; if() #5414 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 3121; if() #5414 Body End
LOADD d2,2; if() #5414 Else Start
STORED d2,1; if() #5414 Else End
LOADD d2,1; if() #5412 Else End AND if() #5410 Else End AND if() #5416 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3146; Test 'if'
SETR d2,gd2; if() #5416 Body Start
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd2,d2
SETR d2,gd19
PUSHR d2
LOADD d2,1
POP d3
ADDR d2,d3
SETR gd19,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3170; if() #5416 Body End
LOADD d2,0; if() #5418 Test AND if() #5416 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3170; Test 'if'
SETR d2,gd3; if() #5418 Body Start
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd3,d2
SETR d2,gd20
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
SETR gd20,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5418 Body End
GOTO 3271; if() #5416 Else End AND if() #5406 Body End
SETV d2,-1; if() #5406 Else Start
STORED d2,1
SETV d2,-1
STORED d2,0
SETV d2,0
SETR gd22,d2
SETR d2,gd18
ORV d2,16
SETR gd18,d2
LOADD d2,4; if() #5419 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3191; Test 'if'
SETR d2,gd3; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5419 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3220; if() #5419 Body End
LOADD d2,4; if() #5421 Test AND if() #5419 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3203; Test 'if'
SETR d2,gd3; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5421 Body Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,0
GOTO 3220; if() #5421 Body End
LOADD d2,4; if() #5423 Test AND if() #5421 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3214; Test 'if'
SETR d2,gd2; InlineFunc[untyped Floor(untyped)] Params Start AND if() #5423 Body Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
MULTV d2,8
STORED d2,1
GOTO 3220; if() #5423 Body End
SETR d2,gd2; InlineFunc[untyped Ceiling(untyped)] Params Start AND if() #5423 Else Start
LSHIFTV d2,0
DIVV d2,8; InlineFunc[untyped Ceiling(untyped)] Params End
CEILING d2; InlineFunc[untyped Ceiling(untyped)] Body
MULTV d2,8
STORED d2,1; if() #5423 Else End
LOADD d2,1; if() #5421 Else End AND if() #5419 Else End AND if() #5425 Test
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3246; Test 'if'
SETR d2,gd19; if() #5425 Body Start
PUSHR d2
LOADD d2,1
PUSHR d2
SETR d2,gd2
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd19,d2
LOADD d2,1
SETR gd2,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
GOTO 3271; if() #5425 Body End
LOADD d2,0; if() #5427 Test AND if() #5425 Else Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3271; Test 'if'
SETR d2,gd20; if() #5427 Body Start
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd3
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
SETR gd20,d2
LOADD d2,0
SETR gd3,d2
PUSHR d4
LOADD d2,6; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4; if() #5427 Body End
POPARGS d5,0.0007; if() #5425 Else End AND if() #5406 Else End AND if() #5404 Body End
RETURNFUNC; Func[void Ghost_CheckHit(FFC, NPC)] Body End
SETR d4,SP; Func[void Ghost_ClearCombos()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
RETURNFUNC; Func[void Ghost_ClearCombos()] Body End
SETR d4,SP; Func[void Ghost_SetFlag(int)] Body Start
LOADD d2,0; if() #5729 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3299; Test 'if'
SETR d2,gd17; if() #5729 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ORR d2,d3
SETR gd17,d2
GOTO 3305; if() #5729 Body End
SETR d2,gd16; if() #5729 Else Start
PUSHR d2
LOADD d2,0
POP d3
ORR d2,d3
SETR gd16,d2; if() #5729 Else End
POPARGS d5,0.0001
RETURNFUNC; Func[void Ghost_SetFlag(int)] Body End
SETR d4,SP; Func[void Ghost_UnsetFlag(int)] Body Start
LOADD d2,0; if() #5801 Test
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3325; Test 'if'
SETR d2,gd17; if() #5801 Body Start
PUSHR d2
LOADD d2,0
ANDV d2,65535
SETV d3,-2
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
SETR gd17,d2
GOTO 3332; if() #5801 Body End
SETR d2,gd16; if() #5801 Else Start
PUSHR d2
LOADD d2,0
BITNOT d2
POP d3
ANDR d2,d3
SETR gd16,d2; if() #5801 Else End
POPARGS d5,0.0001
RETURNFUNC; Func[void Ghost_UnsetFlag(int)] Body End
PUSHARGSR d2,0.0004; Func[void Ghost_MoveXY(int, int, int)] Body Start
SETR d4,SP
LOADD d2,5; if() #5670 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3347
PUSHR d4
CALLFUNC 0.4615; UsrFunc[bool IsSideview()] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3358
PUSHR d4
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3364; Test 'if'
SETV d2,0; if() #5670 Body Start
STORED d2,5; if() #5670 Body End
LOADD d2,6; while() #5674 Test AND InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 3380
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
COMPAREV d2,8
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3451; Test 'while'
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #5677 Test AND while() #5674 Body Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3422; Test 'if'
LOADD d2,6; if() #5679 Test AND if() #5677 Body Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3411; Test 'if'
PUSHR d4; if() #5679 Body Start
PUSHV 8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
SUBV d2,8
STORED d2,6
GOTO 3421; if() #5679 Body End
PUSHR d4; if() #5679 Else Start
PUSHV -8; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 0
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,6
ADDV d2,8
STORED d2,6; if() #5679 Else End
GOTO 3450; if() #5677 Body End
LOADD d2,5; if() #5681 Test AND if() #5677 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3440; Test 'if'
PUSHR d4; if() #5681 Body Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV 8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
SUBV d2,8
STORED d2,5
GOTO 3450; if() #5681 Body End
PUSHR d4; if() #5681 Else Start
PUSHV 0; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHV -8
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
LOADD d2,5
ADDV d2,8
STORED d2,5; if() #5681 Else End
GOTO 3364; if() #5677 Else End AND while() #5674 Body End AND while() #5674 End
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,6; if() #5683 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3532; Test 'if'
SETR d2,gd23; if() #5683 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5685 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3502; Test 'if'
LOADD d2,3; if() #5685 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3524; if() #5685 Body End
PUSHR d4; if() #5687 Test AND if() #5685 Else Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3520; Test 'if'
LOADD d2,3; if() #5687 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3524; if() #5687 Body End
LOADD d2,3; if() #5687 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #5687 Else End
LOADD d2,3; if() #5685 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2
GOTO 3617; if() #5683 Body End
LOADD d2,6; if() #5689 Test AND if() #5683 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3617; Test 'if'
SETR d2,gd13; if() #5689 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd23
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd2
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5690 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3587; Test 'if'
LOADD d2,3; if() #5690 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3610; if() #5690 Body End
PUSHR d4; if() #5692 Test AND if() #5690 Else Start
PUSHV 3; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,6
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3604; Test 'if'
LOADD d2,3; if() #5692 Body Start
PUSHR d2
LOADD d2,6
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3610; if() #5692 Body End
LOADD d2,3; if() #5692 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #5692 Else End
LOADD d2,3; if() #5690 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd2,d2; if() #5689 Body End
LOADD d2,5; if() #5683 Else End AND if() #5694 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3690; Test 'if'
SETR d2,gd24; if() #5694 Body Start
RSHIFTV d2,8
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5696 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3660; Test 'if'
LOADD d2,3; if() #5696 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3682; if() #5696 Body End
PUSHR d4; if() #5698 Test AND if() #5696 Else Start
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
SUBV2 0,d2
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3678; Test 'if'
LOADD d2,3; if() #5698 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3682; if() #5698 Body End
LOADD d2,3; if() #5698 Else Start
RSHIFTV d2,3
LSHIFTV d2,3
STORED d2,3; if() #5698 Else End
LOADD d2,3; if() #5696 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2
GOTO 3775; if() #5694 Body End
LOADD d2,5; if() #5700 Test AND if() #5694 Else Start
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3775; Test 'if'
SETR d2,gd14; if() #5700 Body Start
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
SETR d2,gd24
ANDV d2,255
POP d3
SUBR d3,d2
SETR d2,d3
SUBV d2,1
STORED d2,2
SETR d2,gd3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,1
LOADD d2,3; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
DIVV d2,8; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,0
LOADD d2,1; if() #5701 Test
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3745; Test 'if'
LOADD d2,3; if() #5701 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3768; if() #5701 Body End
PUSHR d4; if() #5703 Test AND if() #5701 Else Start
PUSHV 1; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3762; Test 'if'
LOADD d2,3; if() #5703 Body Start
PUSHR d2
LOADD d2,5
POP d3
ADDR d2,d3
STORED d2,3
GOTO 3768; if() #5703 Body End
LOADD d2,3; if() #5703 Else Start
ADDV d2,7
RSHIFTV d2,3
LSHIFTV d2,3
SUBV d2,1
STORED d2,3; if() #5703 Else End
LOADD d2,3; if() #5701 Else End
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d2,d3
SETR gd3,d2; if() #5700 Body End
PUSHR d4; if() #5694 Else End AND if() #5705 Test
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3786
SETR d2,gd18
ANDV d2,4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3851; Test 'if'
PUSHR d4; if() #5707 Test AND if() #5705 Body Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 3810; Test 'if'
PUSHR d4; if() #5707 Body Start
LOADD d2,6; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,5
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0111; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 3847; if() #5707 Body End
LOADD d2,6; InlineFunc[int Abs(int)] Params AND if() #5709 Test AND if() #5707 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,5; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3835; Test 'if'
LOADD d2,5; if() #5711 Test AND if() #5709 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3832; Test 'if'
SETV d2,0; if() #5711 Body Start
SETR gd5,d2
GOTO 3834; if() #5711 Body End
SETV d2,1; if() #5711 Else Start
SETR gd5,d2; if() #5711 Else End
GOTO 3847; if() #5709 Body End
LOADD d2,6; if() #5713 Test AND if() #5709 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3845; Test 'if'
SETV d2,2; if() #5713 Body Start
SETR gd5,d2
GOTO 3847; if() #5713 Body End
SETV d2,3; if() #5713 Else Start
SETR gd5,d2; if() #5713 Else End
SETR d2,gd2; if() #5709 Else End AND if() #5707 Else End
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2; if() #5705 Body End
POPARGS d5,0.0007
RETURNFUNC; Func[void Ghost_MoveXY(int, int, int)] Body End
PUSHR d2; Func[void __GhCleanUp(FFC)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCWIDTH,d2
SETV d2,16
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFCHEIGHT,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DELAY,d2
SETV d2,0; for() #9010 setup
STORED d2,0
LOADD d2,0; for() #9010 LoopTest
COMPAREV d2,11
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3990; for() #9010 TestFail?
SETV d2,0; for() #9010 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
LOADD d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; for() #9010 Body End
LOADD d2,0; for() #9010 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 3965; for() #9010 End
POPARGS d5,0.0002
RETURNFUNC; Func[void __GhCleanUp(FFC)] Body End
SETR d4,SP; Func[void Ghost_ForceDir(int)] Body Start
LOADD d2,0
SETR gd5,d2
SETR d2,gd18
ORV d2,4
SETR gd18,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void Ghost_ForceDir(int)] Body End
PUSHARGSR d2,0.0002; Func[void Ghost_Move(int, int, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,4; if() #5647 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4015; Test 'if'
LOADD d2,3; if() #5647 Body Start
SUBV2 0,d2
STORED d2,0
GOTO 4093; if() #5647 Body End
LOADD d2,4; if() #5649 Test AND if() #5647 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4023; Test 'if'
LOADD d2,3; if() #5649 Body Start
STORED d2,0
GOTO 4093; if() #5649 Body End
LOADD d2,4; if() #5651 Test AND if() #5649 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4032; Test 'if'
LOADD d2,3; if() #5651 Body Start
SUBV2 0,d2
STORED d2,1
GOTO 4093; if() #5651 Body End
LOADD d2,4; if() #5653 Test AND if() #5651 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4040; Test 'if'
LOADD d2,3; if() #5653 Body Start
STORED d2,1
GOTO 4093; if() #5653 Body End
LOADD d2,4; if() #5655 Test AND if() #5653 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4054; Test 'if'
LOADD d2,3; if() #5655 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4093; if() #5655 Body End
LOADD d2,4; if() #5657 Test AND if() #5655 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4067; Test 'if'
LOADD d2,3; if() #5657 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,0
GOTO 4093; if() #5657 Body End
LOADD d2,4; if() #5659 Test AND if() #5657 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4080; Test 'if'
LOADD d2,3; if() #5659 Body Start
SUBV2 0,d2
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4093; if() #5659 Body End
LOADD d2,4; if() #5661 Test AND if() #5659 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4092; Test 'if'
LOADD d2,3; if() #5661 Body Start
MULTV d2,0.7071
STORED d2,1
LOADD d2,3
MULTV d2,0.7071
STORED d2,0
GOTO 4093; if() #5661 Body End
GOTO 4102; return (Void) AND if() #5661 Else
PUSHR d4; if() #5659 Else End AND if() #5657 Else End AND if() #5655 Else End AND if() #5653 Else End AND if() #5651 Else End AND if() #5649 Else End AND if() #5647 Else End
LOADD d2,1; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void Ghost_Move(int, int, int)] Body End
SETR d4,SP; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body Start
LOADD d2,1; if() #9096 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 4115
LOADD d2,1
COMPAREV d2,-2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4120; Test 'if'
SETV d2,1; if() #9096 Body Start
STORED d2,1; if() #9096 Body End
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
SETR gd11,d2
LOADD d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
LOADD d2,0
SETR gd12,d2
LOADD d2,2; if() #9098 Test
COMPAREV d2,0
GOTOTRUE 4166; Test 'if'
LOADD d2,3; if() #9098 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCX
SETR gd2,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCY
SETR gd3,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCZ
SETR gd4,d2
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCJUMP
SETR gd6,d2
GOTO 4198; if() #9098 Body End
LOADD d2,4; if() #9098 Else Start
PUSHR d2
POP REFFFC
SETR d2,X
SETR gd2,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,Y
SETR gd3,d2
SETV d2,0
SETR gd4,d2
SETV d2,0
SETR gd6,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2; if() #9098 Else End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
SETV d2,0
SETR gd7,d2
SETV d2,0
SETR gd8,d2
SETV d2,0
SETR gd9,d2
SETV d2,0
SETR gd10,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
SETR gd13,d2
LOADD d2,4
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
SETR gd14,d2
SETV d2,0
SETR gd23,d2
SETV d2,0
SETR gd24,d2
LOADD d2,1; if() #9100 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4316; Test 'if'
SETV d2,3; if(true) #9101 [Opt:AlwaysOn] AND if() #9100 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,65456
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCOTILE,d2
SETV d2,65456; if(true) #9102 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTILE,d2
SETR d2,gd13
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd14
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2; if() #9100 Body End
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
LOADD d2,3; if() #9103 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4347; Test 'if'
SETV d2,1; if() #9103 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 4359; if() #9103 Body End
SETV d2,0; if() #9103 Else Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #9103 Else End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
SETV d2,0
SETR gd16,d2
SETV d2,0
SETR gd17,d2
SETV d2,0
SETR gd21,d2
SETV d2,0
SETR gd22,d2
SETV d2,0
SETR gd18,d2
SETV d2,0
PUSHR d2
SETR d2,gd26
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,65536
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Body End
PUSHARGSR d2,0.0009; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,8
SETV d2,0
STORED d2,7
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #5595 setup
STORED d2,6
LOADD d2,6; for() #5595 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4543; for() #5595 TestFail?
LOADD d2,6; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #5595 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,8
LOADD d2,8; if() #5598 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,9
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4429; Test 'if'
SETV d2,0; if() #5598 Body Start
STORED d2,7
GOTO 4539; continue #5597
GOTO 4431; if() #5598 Body End
SETV d2,1; if() #5598 Else Start
STORED d2,7; if() #5598 Else End
LOADD d2,8; if() #5600 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4446; Test 'if'
SETV d2,0; if() #5600 Body Start
STORED d2,7
GOTO 4539; continue #5597 AND if() #5600 Body End
LOADD d2,7; if() #5601 Test
COMPAREV d2,0
GOTOTRUE 4494; Test 'if'
PUSHR d4; if() #5601 Body Start
LOADD d2,10; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params Start
PUSHR d2
LOADD d2,8
PUSHR d2
PUSHV 1
LOADD d2,8
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
PUSHR d2
LOADD d2,8
PUSHR d2
POP REFNPC
PUSHR NPCCSET; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Params End
CALLFUNC 0.4104; UsrFunc[void __Ghost_InitInternal(FFC, NPC, bool, int, int)] Call
POP d4
LOADD d2,8; if() #5603 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4491; Test 'if'
SETV d2,1; if() #5603 Body Start
PUSHR d2
LOADD d2,10
POP d3
PUSHR d2
PUSHR d3
SETV d2,1
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #5603 Body End
LOADD d2,8; return Start
GOTO 4543; return End
GOTO 4539; if() #5601 Body End
ALLOCATEMEMV d2,60; if() #5601 Else Start
STORED d2,4
WRITEPODSTRING d2,"ghost.zh: AutoGhost initialization failed - enemy missing.\n"
ALLOCATEMEMV d2,30
STORED d2,2
WRITEPODSTRING d2,"  DMap %d, screen %X\n"
ALLOCATEMEMV d2,30
STORED d2,0
WRITEPODSTRING d2,"  Script %d, enemy ID %d\n"
LOADD d2,4; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGR CURDMAP
PUSHVARGR CURDSCR; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,10
PUSHR d2
POP REFFFC
PUSHVARGR FFSCRIPT
LOADD d2,9
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0
PUSHR d2
LOADD d2,10
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
QUIT; InlineFunc[void Quit()] Body
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,4
DEALLOCATEMEMR d3; if() #5601 Else End
LOADD d2,6; for() #5595 Body End AND for() #5595 LoopIncrement
SUBV d2,1
STORED d2,6
GOTO 4402; for() #5595 End
POPARGS d5,0.0011
RETURNFUNC; Func[NPC Ghost_InitAutoGhost(FFC, int)] Body End
SETR d4,SP; Func[int VectorX(int, int)] Body Start
LOADD d2,0; InlineFunc[int Cos(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 4554; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int VectorX(int, int)] Body End
SETR d4,SP; Func[int VectorY(int, int)] Body Start
LOADD d2,0; InlineFunc[int Sin(int)] Params Start AND return Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
GOTO 4565; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int VectorY(int, int)] Body End
PUSHR d2; Func[void Ghost_MoveTowardLink(int, int)] Body Start
SETR d4,SP
PUSHR d4
SETR d2,gd2; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
SETR d2,gd13
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
MULTV d2,8
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0091; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,0
PUSHARGSR d4,0.0002; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
LOADD d2,2; UsrFunc[int VectorX(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorX(int, int)] Params End
CALLFUNC 0.4545; UsrFunc[int VectorX(int, int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,2; UsrFunc[int VectorY(int, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int VectorY(int, int)] Params End
CALLFUNC 0.4556; UsrFunc[int VectorY(int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
POP d4
POPARGS d5,0.0003
RETURNFUNC; Func[void Ghost_MoveTowardLink(int, int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
GOTO 4634; return End
RETURNFUNC; Func[bool IsSideview()] Body End
PUSHR d2; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCJUMP,d2
PUSHR d4; unless() #5815 Test
PUSHV 32; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 4802; Test 'unless'
PUSHR d4; if() #5816 Test AND unless() #5815 Body Start
CALLFUNC 0.4615; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4761; Test 'if'
SETR d2,gd6; if() #5818 Test AND if() #5816 Body Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4669
PUSHR d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4760; Test 'if'
PUSHR d4; if() #5818 Body Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
STORED d2,0
PUSHR d4
PUSHV 64; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3307; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
SETR d2,gd6; if() #5820 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4730; Test 'if'
PUSHR d4; if() #5820 Body Start
PUSHV 32; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3281; UsrFunc[void Ghost_SetFlag(int)] Call
PEEK d4
PUSHV 0; UsrFunc[void Ghost_Move(int, int, int)] Params Start
PUSHR gd6
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.4000; UsrFunc[void Ghost_Move(int, int, int)] Call
POP d4
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
SETR d2,gd6; if() #5822 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4719
PUSHR d4
PUSHV 0; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 1
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4725; Test 'if'
SETV d2,0; if() #5822 Body Start
SETR gd6,d2; if() #5822 Body End
PUSHR d4
PUSHV 32; UsrFunc[void Ghost_UnsetFlag(int)] Params
CALLFUNC 0.3307; UsrFunc[void Ghost_UnsetFlag(int)] Call
POP d4
GOTO 4753; if() #5820 Body End
PUSHR d4; if() #5820 Else Start
PUSHV 1; UsrFunc[void Ghost_Move(int, int, int)] Params Start
SETR d2,gd6
SUBV2 0,d2
PUSHR d2
PUSHV 2; UsrFunc[void Ghost_Move(int, int, int)] Params End
CALLFUNC 0.4000; UsrFunc[void Ghost_Move(int, int, int)] Call
PEEK d4
PUSHARGSV 1,0.0002; UsrFunc[bool Ghost_CanMove(int, int, int)] Params Start
PUSHV 2; UsrFunc[bool Ghost_CanMove(int, int, int)] Params End
CALLFUNC 0.0386; UsrFunc[bool Ghost_CanMove(int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4751; Test 'if'
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #5824 Body Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2
GOTO 4753; if() #5824 Body End
SETV d2,0; if() #5824 Else Start
SETR gd6,d2; if() #5824 Else End
LOADD d2,0; if() #5820 Else End AND if() #5826 Test
COMPAREV d2,0
GOTOTRUE 4760; Test 'if'
PUSHR d4; if() #5826 Body Start
PUSHV 64; UsrFunc[void Ghost_SetFlag(int)] Params
CALLFUNC 0.3281; UsrFunc[void Ghost_SetFlag(int)] Call
POP d4; if() #5826 Body End
GOTO 4802; if() #5818 Body End AND if() #5816 Body End
SETR d2,gd6; if() #5827 Test AND if() #5816 Else Start
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4773
SETR d2,gd4
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4802; Test 'if'
SETR d2,gd4; if() #5829 Test AND if() #5827 Body Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4790; Test 'if'
SETV d2,0; if() #5829 Body Start
SETR gd4,d2
SETV d2,0
SETR gd6,d2
GOTO 4802; if() #5829 Body End
SETR d2,gd4; if() #5829 Else Start
PUSHR d2
SETR d2,gd6
POP d3
ADDR d2,d3
SETR gd4,d2
SETR d2,gd6; InlineFunc[untyped Max(untyped, untyped)] Params Start
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
SETR gd6,d2; if() #5829 Else End
SETR d2,gd7; if() #5827 Body End AND if() #5816 Else End AND unless() #5815 Body End AND if() #5831 Test
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4812
SETR d2,gd8
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4820
SETR d2,gd9
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 4828
SETR d2,gd10
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4852; Test 'if'
SETR d2,gd7; if() #5831 Body Start
PUSHR d2
SETR d2,gd9
POP d3
ADDR d2,d3
SETR gd7,d2
SETR d2,gd8
PUSHR d2
SETR d2,gd10
POP d3
ADDR d2,d3
SETR gd8,d2
PUSHR d4
PUSHR gd7; UsrFunc[void Ghost_MoveXY(int, int, int)] Params Start
PUSHR gd8
PUSHV 2; UsrFunc[void Ghost_MoveXY(int, int, int)] Params End
CALLFUNC 0.3334; UsrFunc[void Ghost_MoveXY(int, int, int)] Call
PEEK d4
PUSHR gd5; UsrFunc[void Ghost_ForceDir(int)] Params
CALLFUNC 0.3992; UsrFunc[void Ghost_ForceDir(int)] Call
POP d4; if() #5831 Body End
PUSHR d4
LOADD d2,4; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
PUSHV 0; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Params End
CALLFUNC 0.4895; UsrFunc[void __Ghost_WaitframePart1(FFC, NPC, bool)] Call
PEEK d4
LOADD d2,4; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Params End
CALLFUNC 0.1999; UsrFunc[void __Ghost_UpdateFlashing(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2271; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
SETR d2,gd18
ANDV d2,32
SETR gd18,d2
PUSHR d4; return Start
LOADD d2,4; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,1
PUSHR d2; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Params End
CALLFUNC 0.5416; UsrFunc[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Call
POP d4
GOTO 4893; return End
POPARGS d5,0.0005
RETURNFUNC; Func[bool Ghost_Waitframe(FFC, NPC, bool, bool)] Body End
PUSHARGSR d2,0.0002; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body Start
SETR d4,SP
SETR d2,gd18; if() #9208 Test
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4913; Test 'if'
SETR d2,gd5; if() #9208 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
GOTO 5021; if() #9208 Body End
LOADD d2,2; if() #9210 Test AND if() #9208 Else Start
COMPAREV d2,0
GOTOTRUE 4922; Test 'if'
LOADD d2,3; if() #9210 Body Start
PUSHR d2
POP REFNPC
SETR d2,NPCDIR
SETR gd5,d2
GOTO 5021; if() #9210 Body End
PUSHR d4; if() #9212 Test AND if() #9210 Else Start
PUSHV 64; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4946
SETR d2,gd19
PUSHR d2
SETR d2,gd2
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0.0001
GOTOMORE 4944
SETR d2,gd20
PUSHR d2
SETR d2,gd3
POP d3
COMPARER d3,d2
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5021; Test 'if'
SETR d2,gd2; if() #9212 Body Start
PUSHR d2
SETR d2,gd19
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETR d2,gd3
PUSHR d2
SETR d2,gd20
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHR d4; if() #9215 Test
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 4984; Test 'if'
PUSHR d4; if() #9215 Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int WrapAngle(int)] Params Start AND UsrFunc[int AngleDir8(int)] Params Start
PUSHR d2
LOADD d2,0
SETR d1,d2; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End AND InlineFunc[int WrapAngle(int)] Params End
WRAPRADIANS d2; InlineFunc[int WrapAngle(int)] Body
MULTV d2,57.2958
PUSHR d2; UsrFunc[int AngleDir8(int)] Params End
CALLFUNC 0.0111; UsrFunc[int AngleDir8(int)] Call
POP d4
SETR gd5,d2
GOTO 5021; if() #9215 Body End
LOADD d2,1; InlineFunc[int Abs(int)] Params AND if() #9217 Test AND if() #9215 Else Start
ABS d2; InlineFunc[int Abs(int)] Body
PUSHR d2
LOADD d2,0; InlineFunc[int Abs(int)] Params
ABS d2; InlineFunc[int Abs(int)] Body
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5009; Test 'if'
LOADD d2,1; if() #9219 Test AND if() #9217 Body Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5006; Test 'if'
SETV d2,2; if() #9219 Body Start
SETR gd5,d2
GOTO 5008; if() #9219 Body End
SETV d2,3; if() #9219 Else Start
SETR gd5,d2; if() #9219 Else End
GOTO 5021; if() #9217 Body End
LOADD d2,0; if() #9221 Test AND if() #9217 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5019; Test 'if'
SETV d2,0; if() #9221 Body Start
SETR gd5,d2
GOTO 5021; if() #9221 Body End
SETV d2,1; if() #9221 Else Start
SETR gd5,d2; if() #9221 Else End
SETR d2,gd5; if() #9217 Else End AND if() #9215 Else End AND if() #9212 Body End AND if() #9210 Else End AND if() #9208 Else End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCDIR,d2
SETR d2,gd2
SETR gd19,d2
SETR d2,gd3
SETR gd20,d2
SETR d2,gd11; if() #9223 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 5044
SETR d2,gd11
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5068; Test 'if'
LOADD d2,4; if() #9226 Test AND if() #9223 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5067; Test 'if'
SETR d2,gd11; if() #9226 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9226 Body End
GOTO 5164; if() #9223 Body End
PUSHR d4; if() #9227 Test AND if() #9223 Else Start
PUSHV 512; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5106; Test 'if'
LOADD d2,4; if() #9229 Test AND if() #9227 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5105; Test 'if'
SETR d2,gd11; if() #9229 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0468; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9229 Body End
GOTO 5164; if() #9227 Body End
PUSHR d4; if() #9230 Test AND if() #9227 Else Start
PUSHV 256; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5144; Test 'if'
LOADD d2,4; if() #9232 Test AND if() #9230 Body Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
PUSHR d2
SETR d2,gd5
POP d3
ADDR d2,d3
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5143; Test 'if'
SETR d2,gd11; if() #9232 Body Start
PUSHR d2
PUSHR d4
PUSHR gd5; UsrFunc[int __NormalizeDir(int)] Params
CALLFUNC 0.0468; UsrFunc[int __NormalizeDir(int)] Call
POP d4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9232 Body End
GOTO 5164; if() #9230 Body End
LOADD d2,4; if() #9233 Test AND if() #9230 Else Start
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
SETR d2,gd11
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5164; Test 'if'
SETR d2,gd11; if() #9233 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #9233 Body End
LOADD d2,4; if() #9230 Else End AND if() #9227 Else End AND if() #9223 Else End AND if() #9234 Test
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5184; Test 'if'
SETR d2,gd13; if() #9234 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2; if() #9234 Body End
LOADD d2,3; if() #9235 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTXSZ
PUSHR d2
SETR d2,gd13
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5228; Test 'if'
SETR d2,gd13; if() #9235 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETR d2,gd13
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd13
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHXOFS,d2; if() #9235 Body End
LOADD d2,4; if() #9236 Test
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5248; Test 'if'
SETR d2,gd14; if() #9236 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2; if() #9236 Body End
LOADD d2,3; if() #9237 Test
PUSHR d2
POP REFNPC
SETR d2,NPCTYSZ
PUSHR d2
SETR d2,gd14
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5292; Test 'if'
SETR d2,gd14; if() #9237 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd14
MULTV d2,16
SETV d2,16
PUSHR d2
SETR d2,gd14
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYSZ,d2
SETV d2,0
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHYOFS,d2; if() #9237 Body End
PUSHR d4; if() #9238 Test
PUSHV 128; UsrFunc[bool Ghost_FlagIsSet(int)] Params
CALLFUNC 0.1585; UsrFunc[bool Ghost_FlagIsSet(int)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5361; Test 'if'
SETR d2,gd4; if() #9239 Test AND if() #9238 Body Start
COMPAREV d2,32
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5313
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5330; Test 'if'
SETV d2,1; if() #9239 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
GOTO 5361; if() #9239 Body End
SETR d2,gd4; if() #9242 Test AND if() #9239 Else Start
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5345
LOADD d2,4
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5361; Test 'if'
SETV d2,0; if() #9242 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2; if() #9242 Body End
SETR d2,gd15; if() #9239 Else End AND if() #9238 Body End
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETR d2,gd12
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCCSET,d2
SETR d2,gd18; if() #9244 Test
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5395; Test 'if'
SETR d2,gd12; if() #9244 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
GOTO 5409; if() #9244 Body End
SETR d2,gd21; if() #9246 Test AND if() #9244 Else Start
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5409; Test 'if'
SETR d2,gd12; if() #9246 Body Start
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2; if() #9246 Body End
PUSHR d4; if() #9244 Else End
LOADD d2,3; UsrFunc[void __Ghost_DrawShadow(NPC)] Params Start
PUSHR d2; UsrFunc[void __Ghost_DrawShadow(NPC)] Params End
CALLFUNC 0.2087; UsrFunc[void __Ghost_DrawShadow(NPC)] Call
POP d4
POPARGS d5,0.0005
RETURNFUNC; Func[void __Ghost_WaitframePart1(FFC, NPC, bool)] Body End
PUSHR d2; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body Start
SETR d4,SP
LOADD d2,3; InlineFunc[bool NPC->isValid()] Params AND unless() #9248 Test
ISVALIDNPC d2; InlineFunc[bool NPC->isValid()] Body
COMPAREV d2,0
GOTOFALSE 5443; Test 'unless'
LOADD d2,2; if() #9249 Test AND unless() #9248 Body Start
COMPAREV d2,0
GOTOTRUE 5435; Test 'if'
PUSHR d4; if() #9249 Body Start
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3853; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2
PUSHR d4
CALLFUNC 0.3273; UsrFunc[void Ghost_ClearCombos()] Call
POP d4; if() #9249 Body End
LOADD d2,1; if() #9250 Test
COMPAREV d2,0
GOTOTRUE 5439; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #9250 Body
SETV d2,0
SETR gd15,d2
SETV d2,0; return Start
GOTO 5569; return End AND unless() #9248 Body End
SETV d2,0
STORED d2,0
LOADD d2,3; if() #9251 Test
PUSHR d2
POP REFNPC
SETR d2,NPCHP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 5455; Test 'if'
SETV d2,1; if() #9251 Body Start
STORED d2,0; if() #9251 Body End
LOADD d2,0; unless() #9252 Test
COMPAREV d2,0
GOTOFALSE 5474; Test 'unless'
PUSHR d4; unless() #9252 Body Start
LOADD d2,4; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Params End
CALLFUNC 0.2819; UsrFunc[void Ghost_CheckHit(FFC, NPC)] Call
PEEK d4
LOADD d2,4; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,3
PUSHR d2; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Params End
CALLFUNC 0.1723; UsrFunc[bool Ghost_CheckFreeze(FFC, NPC)] Call
POP d4
COMPAREV d2,0
SETTRUEI d2
STORED d2,0; unless() #9252 Body End
LOADD d2,3
PUSHR d2
POP REFNPC
SETR d2,NPCHP
SETR gd15,d2
LOADD d2,0; if() #9253 Test
COMPAREV d2,0
GOTOTRUE 5567; Test 'if'
LOADD d2,2; if() #9254 Test AND if() #9253 Body Start
COMPAREV d2,0
GOTOTRUE 5561; Test 'if'
SETV d2,1; if() #9254 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTXSZ,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCTYSZ,d2
SETR d2,gd2
PUSHR d2
SETR d2,gd13
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd13
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETR d2,gd3
PUSHR d2
SETR d2,gd14
SUBV d2,1
MULTV d2,8
SETV d2,8
PUSHR d2
SETR d2,gd14
SUBV d2,1
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETR d2,gd4
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCZ,d2
PUSHR d4
LOADD d2,4; UsrFunc[void __GhCleanUp(FFC)] Params Start
PUSHR d2; UsrFunc[void __GhCleanUp(FFC)] Params End
CALLFUNC 0.3853; UsrFunc[void __GhCleanUp(FFC)] Call
POP d4
SETV d2,0
SETR gd11,d2; if() #9254 Body End
LOADD d2,1; if() #9255 Test
COMPAREV d2,0
GOTOTRUE 5565; Test 'if'
QUIT; InlineFunc[void Quit()] Body AND if() #9255 Body
SETV d2,0; return Start
GOTO 5569; return End AND if() #9253 Body End
SETV d2,1; return Start
GOTO 5569; return End
POPARGS d5,0.0005
RETURNFUNC; Func[bool __Ghost_WaitframePart2(FFC, NPC, bool, bool)] Body End
PUSHARGSR d2,0.0006; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,5
LOADD d2,8; if() #9282 Test
PUSHR d2
SETV d2,0
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5587; Test 'if'
LOADD d2,5; if() #9282 Body Start
ORV d2,4
STORED d2,5; if() #9282 Body End
LOADD d2,8; if() #9283 Test
PUSHR d2
SETV d2,1
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOTRUE 5599; Test 'if'
LOADD d2,5; if() #9283 Body Start
ORV d2,1
STORED d2,5; if() #9283 Body End
PUSHR d4; if() #9284 Test
LOADD d2,7; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params Start
PUSHR d2; UsrFunc[bool __Ghost_IsFlickering(NPC)] Params End
CALLFUNC 0.5928; UsrFunc[bool __Ghost_IsFlickering(NPC)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 5609; Test 'if'
LOADD d2,5; if() #9284 Body Start
ORV d2,2
STORED d2,5; if() #9284 Body End
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,CSET
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,5
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,3
STORED d2,4
SETR d2,gd2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
POP d3
ADDR d2,d3
STORED d2,3
SETR d2,gd3
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCYOFS
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,gd4
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFNPC
SETR d2,NPCZOFS
POP d3
ADDR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,2
SETR d2,gd26; if() #9285 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5788; Test 'if'
SETV d2,1; if() #9285 Body Start
STORED d2,1
SETV d2,0; for() #9286 setup
STORED d2,0
LOADD d2,0; for() #9286 LoopTest
PUSHR d2
SETR d2,gd26
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5788; for() #9286 TestFail?
SETR d2,gd26; for() #9286 Body Start
PUSHR d2
LOADD d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,1
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,2
POP d0
READPODARRAYR d2,d2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
SETR d2,gd26
PUSHR d2
LOADD d2,1
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,6
STORED d2,4
LOADD d2,1
ADDV d2,6
STORED d2,1
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2; for() #9286 Body End
LOADD d2,0; for() #9286 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 5670; for() #9286 End
LOADD d2,8; if() #9285 Body End AND if(true) #9289 [Opt:AlwaysOn]
PUSHR d2
POP REFFFC
SETR d2,DATA
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,3
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,1
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,2
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,2
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTWIDTH
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,3
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,8
PUSHR d2
POP REFFFC
SETR d2,FFTHEIGHT
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,4
ADDV d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,6
PUSHR d2
POP d0
READPODARRAYV d2,0
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,6
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
POP d2
POPARGS d5,0.0009
RETURNFUNC; Func[void __SetUpDrawingArray(FFC, NPC, int)] Body End
PUSHR d2; Func[void __HideFFCAndWait(FFC)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,0
SETV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
WAITFRAME; InlineFunc[void Waitframe()] Body
LOADD d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __HideFFCAndWait(FFC)] Body End
PUSHR d2; Func[bool IsPit(int)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
POP d0
SETR d2,COMBOTD
STORED d2,0
LOADD d2,0; if() #6283 Test
COMPAREV d2,41
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5902; Test 'if'
SETV d2,1; return Start AND if() #6283 Body Start
GOTO 5926; return End AND if() #6283 Body End
LOADD d2,0; if() #6284 Test
COMPAREV d2,93
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5909; Test 'if'
SETV d2,1; return Start AND if() #6284 Body Start
GOTO 5926; return End AND if() #6284 Body End
LOADD d2,0; if() #6285 Test
COMPAREV d2,80
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5918
LOADD d2,0
COMPAREV d2,82
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5924; Test 'if'
SETV d2,1; return Start AND if() #6285 Body Start
GOTO 5926; return End AND if() #6285 Body End
SETV d2,0; return Start
GOTO 5926; return End
POPARGS d5,0.0002
RETURNFUNC; Func[bool IsPit(int)] Body End
SETR d4,SP; Func[bool __Ghost_IsFlickering(NPC)] Body Start
LOADD d2,0; if() #9108 Test
PUSHR d2
POP REFNPC
SETR d2,NPCMFLAGS
ANDV d2,128
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5940; Test 'if'
SETV d2,1; return Start AND if() #9108 Body Start
GOTO 5942; return End AND if() #9108 Body End
SETV d2,0; return Start
GOTO 5942; return End
POPARGS d5,0.0001
RETURNFUNC; Func[bool __Ghost_IsFlickering(NPC)] Body End
PUSHARGSR d2,0.0004; Func[void SpawnAnimation(FFC, NPC)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFFFC
SETR d2,DATA
STORED d2,3
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCCOLLDET
STORED d2,2
LOADD d2,4
PUSHR d2
POP REFNPC
SETR d2,NPCXOFS
STORED d2,1
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
SETV d2,0; for() #11066 setup
STORED d2,0
LOADD d2,0; for() #11066 LoopTest
COMPAREV d2,32
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6094; for() #11066 TestFail?
SETV d2,0; for() #11066 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
SETV d2,32768
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2271; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
PUSHR d4
LOADD d2,5; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Params End
CALLFUNC 0.2686; UsrFunc[void Ghost_SetPosition(FFC, NPC)] Call
PEEK d4
LOADD d2,5; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params Start
PUSHR d2
LOADD d2,4
PUSHR d2; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Params End
CALLFUNC 0.2271; UsrFunc[void Ghost_WaitframeLight(FFC, NPC)] Call
POP d4
LOADD d2,0; if() #11069 Test
COMPAREV d2,29
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6088; Test 'if'
SETR d2,UNDERCOMBO; if() #11069 Body Start
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0273; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBODD,d2
SETR d2,UNDERCSET
PUSHR d2
PUSHR d4
LOADD d2,5; UsrFunc[int ComboAt(int, int)] Params Start
PUSHR d2
POP REFFFC
PUSHR X
LOADD d2,5
PUSHR d2
POP REFFFC
PUSHR Y; UsrFunc[int ComboAt(int, int)] Params End
CALLFUNC 0.0273; UsrFunc[int ComboAt(int, int)] Call
POP d4
PUSHR d2
POP d0
POP d2
SETR COMBOCD,d2; if() #11069 Body End
LOADD d2,0; for() #11066 Body End AND for() #11066 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 5980; for() #11066 End
LOADD d2,3
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFNPC
SETR NPCCOLLDET,d2
LOADD d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void SpawnAnimation(FFC, NPC)] Body End


PUSHV 0; void run() Body Start
SETR d4,SP
PUSHR d4
CALLFUNC 0.2576; UsrFunc[void StartGhostZH()] Call
POP d4
PUSHR d4; while(true) #11058 Body [Opt:AlwaysOn] Start
CALLFUNC 0.9156; UsrFunc[void UpdateGhostZH1()] Call
POP d4
WAITDRAW; InlineFunc[void Waitdraw()] Body
PUSHR d4
CALLFUNC 0.9222; UsrFunc[void UpdateGhostZH2()] Call
POP d4
WAITFRAME; InlineFunc[void Waitframe()] Body AND while(true) #11058 Body [Opt:AlwaysOn] End
GOTO 6; while() #11058 End
POPARGS d5,0.0001
RETURNFUNC; void run() Body End
POP d2; Func[int Distance(int, int, int, int)] Body Start
POP d1
POP d0
POP d6
SETR d2,DISTANCE
RETURNFUNC; Func[int Distance(int, int, int, int)] Body End
SETR d4,SP; Func[int RadianAngle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
GOTO 39; return End
POPARGS d5,0.0004
RETURNFUNC; Func[int RadianAngle(int, int, int, int)] Body End
SETR d4,SP; Func[int Randf(int)] Body Start
SETV d2,0; InlineFunc[long RNG->LRand(long)] Params Start AND return Start
PUSHR d2
LOADD d2,0; InlineFunc[long RNG->LRand(long)] Params End
POP REFRNG; InlineFunc[long RNG->LRand(long)] Body Start
RNGLRAND2 d2; InlineFunc[long RNG->LRand(long)] Body End
GOTO 48; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int Randf(int)] Body End
SETR d4,SP; Func[int Angle(int, int, int, int)] Body Start
LOADD d2,1; InlineFunc[int ArcTan(int, int)] Params Start AND InlineFunc[int RadtoDeg(int)] Params Start AND return Start
PUSHR d2
LOADD d2,3
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
SETR d3,d2; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
GOTO 68; return End
POPARGS d5,0.0004
RETURNFUNC; Func[int Angle(int, int, int, int)] Body End
PUSHARGSR d2,0.0007; Func[void AutoGhost()] Body Start
SETR d4,SP
SETR d2,gd27; if() #3606 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 80; Test 'if'
GOTO 441; return (Void) AND if() #3606 Body
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body AND for() #3607 setup
STORED d2,3
LOADD d2,3; for() #3607 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 441; for() #3607 TestFail?
LOADD d2,3; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #3607 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
LOADD d2,6; if() #3610 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,20
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 111; Test 'if'
GOTO 437; continue #3609 AND if() #3610 Body
LOADD d2,6; if() #3611 Test
PUSHR d2
POP REFNPC
SETR d2,NPCID
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 122; Test 'if'
GOTO 437; continue #3609 AND if() #3611 Body
LOADD d2,6; if() #3613 Test AND if(false) #3612 [Opt:AlwaysOff]
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
GOTOTRUE 133; Test 'if'
GOTO 437; continue #3609 AND if() #3613 Body
LOADD d2,6; unless() #3614 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 143; Test 'unless'
GOTO 437; continue #3609 AND unless() #3614 Body
LOADD d2,6; unless() #3615 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
COMPAREV d2,0
GOTOFALSE 153; Test 'unless'
GOTO 437; continue #3609 AND unless() #3615 Body
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,6; if(false) #3616 [Opt:AlwaysOff]
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,1
LOADD d2,6
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCDD
STORED d2,2
LOADD d2,2; if() #3617 Test
COMPAREV d2,-1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 194; Test 'if'
ALLOCATEMEMV d2,2; if() #3617 Body Start
STORED d2,0
PUSHR d4
LOADD d2,6; UsrFunc[int __AutoGhostParseName(NPC, int)] Params Start
PUSHR d2
LOADD d2,0
PUSHR d2; UsrFunc[int __AutoGhostParseName(NPC, int)] Params End
CALLFUNC 0.0443; UsrFunc[int __AutoGhostParseName(NPC, int)] Call
POP d4
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,0
STORED d2,2
LOADD d3,0
DEALLOCATEMEMR d3; if() #3617 Body End
LOADD d2,2; if() #3619 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 205; Test 'if'
PUSHR d4; if() #3619 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0757; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 437; continue #3609 AND if() #3619 Body End
LOADD d2,2; if() #3621 Test
COMPAREV d2,511
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 218; Test 'if'
PUSHR d4; if() #3621 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0757; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 437; continue #3609 AND if() #3621 Body End
PUSHR d4
LOADD d2,5; UsrFunc[int FindUnusedFFC(int)] Params Start
PUSHR d2; UsrFunc[int FindUnusedFFC(int)] Params End
CALLFUNC 0.0808; UsrFunc[int FindUnusedFFC(int)] Call
POP d4
STORED d2,5
LOADD d2,5; unless() #3623 Test
COMPAREV d2,0
GOTOFALSE 233; Test 'unless'
PUSHR d4; unless() #3623 Body Start
LOADD d2,6; UsrFunc[void __AutoGhostKill(NPC)] Params Start
PUSHR d2; UsrFunc[void __AutoGhostKill(NPC)] Params End
CALLFUNC 0.0757; UsrFunc[void __AutoGhostKill(NPC)] Call
POP d4
GOTO 437; continue #3609 AND unless() #3623 Body End
LOADD d2,5; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,4
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCCSET
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR CSET,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTWIDTH,d2
SETV d2,1
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFTHEIGHT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCX
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCY
PUSHR d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCZ
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR XD2,d2
SETV d2,0
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR YD2,d2
LOADD d2,2
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,6
PUSHR d2
POP REFNPC
SETR d2,NPCID
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
SETV d2,1; if(true) #3624 [Opt:AlwaysOn]
PUSHR d2
LOADD d2,4
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFFLAGSD,d2
LOADD d2,1; if() #3625 Test
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 407; Test 'if'
LOADD d2,1; if() #3626 Test AND if() #3625 Body Start
COMPAREV d2,-1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 407; Test 'if'
SETV d2,3; if() #3626 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCEXTEND,d2
SETV d2,1024
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCXOFS,d2; if() #3626 Body End
LOADD d2,1; if() #3625 Body End AND if() #3627 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 425; Test 'if'
SETV d2,1; if() #3627 Body Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
GOTO 437; if() #3627 Body End
LOADD d2,1; if() #3627 Else Start
PUSHR d2
LOADD d2,6
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2; if() #3627 Else End
LOADD d2,3; for() #3607 Body End AND for() #3607 LoopIncrement
SUBV d2,1
STORED d2,3
GOTO 88; for() #3607 End
POPARGS d5,0.0007
RETURNFUNC; Func[void AutoGhost()] Body End
PUSHARGSR d2,0.0009; Func[int __AutoGhostParseName(NPC, int)] Body Start
SETR d4,SP
ALLOCATEMEMV d2,64
STORED d2,8
ALLOCATEMEMV d2,64
STORED d2,7
SETV d2,1
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,10; InlineFunc[void NPC->GetName(int)] Params Start
PUSHR d2
LOADD d2,8; InlineFunc[void NPC->GetName(int)] Params End
POP REFNPC; InlineFunc[void NPC->GetName(int)] Body Start
NPCNAME d2; InlineFunc[void NPC->GetName(int)] Body End
SETV d2,0; for() #8859 setup
STORED d2,6
LOADD d2,6; for() #8859 LoopTest
COMPAREV d2,63
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 695; for() #8859 TestFail?
LOADD d2,8; if() #8862 Test AND for() #8859 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,64
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 691; Test 'if'
LOADD d2,8; if() #8862 Body Start
PUSHR d2
LOADD d2,6
ADDV d2,1
POP d0
READPODARRAYR d2,d2
STORED d2,5
PUSHR d4; if() #8863 Test
LOADD d2,5; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9348; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 588; Test 'if'
SETV d2,0; if() #8863 Body Start
STORED d2,4
LOADD d2,6; for() #8866 setup
ADDV d2,1
STORED d2,6
PUSHR d4; for() #8866 LoopTest
LOADD d2,8; UsrFunc[bool __IsScriptNameChar(int, bool)] Params Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
PUSHV 0; UsrFunc[bool __IsScriptNameChar(int, bool)] Params End
CALLFUNC 0.9348; UsrFunc[bool __IsScriptNameChar(int, bool)] Call
POP d4
COMPAREV d2,0
GOTOTRUE 530; for() #8866 TestFail?
LOADD d2,8; for() #8866 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #8866 Body End
LOADD d2,6; for() #8866 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 498; for() #8866 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int Game->GetFFCScript(int)] Params
GETFFCSCRIPT d2; InlineFunc[int Game->GetFFCScript(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
LOADD d2,6
SUBV d2,1
STORED d2,6
LOADD d2,9; if() #8869 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 587; Test 'if'
ALLOCATEMEMV d2,59; if() #8869 Body Start
STORED d2,2
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script does not exist.\n"
ALLOCATEMEMV d2,80
STORED d2,0
WRITEPODSTRING d2,"  Script name: %s\n"
LOADD d2,2; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,0; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,7
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 755; return End
LOADD d3,0
DEALLOCATEMEMR d3
LOADD d3,2
DEALLOCATEMEMR d3; if() #8869 Body End
GOTO 691; if() #8863 Body End
LOADD d2,5; if() #8870 Test AND if() #8863 Else Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 597
LOADD d2,5
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 606
LOADD d2,5
COMPAREV d2,45
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 691; Test 'if'
SETV d2,0; if() #8870 Body Start
STORED d2,4
LOADD d2,5; if() #8873 Test
COMPAREV d2,45
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 627; Test 'if'
SETV d2,45; if() #8873 Body Start
PUSHR d2
LOADD d2,7
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,1
STORED d2,4
LOADD d2,6
ADDV d2,1
STORED d2,6; if() #8873 Body End
LOADD d2,6; for() #8874 setup
ADDV d2,1
STORED d2,6
LOADD d2,8; for() #8874 LoopTest
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 647
LOADD d2,8
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
COMPAREV d2,57
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 671; for() #8874 TestFail?
LOADD d2,8; for() #8874 Body Start
PUSHR d2
LOADD d2,6
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,4
ADDV d2,1
STORED d2,4; for() #8874 Body End
LOADD d2,6; for() #8874 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 630; for() #8874 End
SETV d2,0
PUSHR d2
LOADD d2,7
PUSHR d2
LOADD d2,4
SETR d3,d2
POP d0
POP d2
WRITEPODARRAYRR d3,d2
LOADD d2,7; InlineFunc[int atoi(int)] Params Start
SETR d3,d2; InlineFunc[int atoi(int)] Params End
ATOI d2,d3; InlineFunc[int atoi(int)] Body
PUSHR d2
LOADD d2,9
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
LOADD d2,6
SUBV d2,1
STORED d2,6; if() #8870 Body End
LOADD d2,6; if() #8863 Else End AND if() #8862 Body End AND for() #8859 Body End AND for() #8859 LoopIncrement
ADDV d2,1
STORED d2,6
GOTO 462; for() #8859 End
LOADD d2,9; if() #8879 Test AND unless(false) #8878 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,0
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 745; Test 'if'
ALLOCATEMEMV d2,54; if() #8879 Body Start
STORED d2,5
WRITEPODSTRING d2,"ghost.zh: AutoGhost setup failed - script not found.\n"
ALLOCATEMEMV d2,80
STORED d2,3
WRITEPODSTRING d2,"  Enemy name: %s\n"
ALLOCATEMEMV d2,55
STORED d2,1
WRITEPODSTRING d2,"  Script name should start after this character: %c\n"
LOADD d2,5; InlineFunc[void printf(char32)] Params Start
PUSHR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,3; InlineFunc[void printf(char32)] Params Start
PUSHR d2
LOADD d2,8
PUSHVARGR d2; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
LOADD d2,1; InlineFunc[void printf(char32)] Params Start
PUSHR d2
PUSHVARGV 64; InlineFunc[void printf(char32)] Params End
PRINTFVARG; InlineFunc[void printf(char32)] Body Start
POP d5; InlineFunc[void printf(char32)] Body End
SETV d2,0; return Start
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 755; return End
LOADD d3,1
DEALLOCATEMEMR d3
LOADD d3,3
DEALLOCATEMEMR d3
LOADD d3,5
DEALLOCATEMEMR d3; if() #8879 Body End
SETV d2,1; return Start
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
GOTO 755; return End
LOADD d3,7
DEALLOCATEMEMR d3
LOADD d3,8
DEALLOCATEMEMR d3
POPARGS d5,0.0011
RETURNFUNC; Func[int __AutoGhostParseName(NPC, int)] Body End
SETR d4,SP; Func[void __AutoGhostKill(NPC)] Body Start
SETV d2,65536
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFNPC
SETR NPCMISCD,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
SETV d2,1024
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,-1000
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCHP,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCITEMSET,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void __AutoGhostKill(NPC)] Body End
PUSHARGSR d2,0.0002; Func[int FindUnusedFFC(int)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
LOADD d2,2; InlineFunc[untyped Max(untyped, untyped)] Params Start AND for() #4873 setup
ADDV d2,1
PUSHVARGR d2
PUSHVARGV 1; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
STORED d2,0
LOADD d2,0; for() #4873 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 866; for() #4873 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #4873 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #4876 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 842
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 862; Test 'if'
LOADD d2,1; unless() #4878 Test AND if() #4876 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 862; Test 'unless'
LOADD d2,1; unless() #4879 Test AND unless() #4878 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 862; Test 'unless'
LOADD d2,0; return Start AND unless() #4879 Body Start
GOTO 868; return End AND unless() #4879 Body End
LOADD d2,0; unless() #4878 Body End AND if() #4876 Body End AND for() #4873 Body End AND for() #4873 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 818; for() #4873 End
SETV d2,0; return Start
GOTO 868; return End
POPARGS d5,0.0003
RETURNFUNC; Func[int FindUnusedFFC(int)] Body End
SETR d4,SP; Func[int CenterX(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 892; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int CenterX(EWeapon)] Body End
SETR d4,SP; Func[int CenterY(EWeapon)] Body Start
LOADD d2,0; return Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
GOTO 916; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int CenterY(EWeapon)] Body End
PUSHARGSR d2,0.0002; Func[void CleanUpGhostFFCs()] Body Start
SETR d4,SP
SETR d2,LINKHP; if() #3885 Test
COMPAREV d2,0
SETLESSI d2
SETV d2,0
COMPAREV d2,0
GOTOTRUE 977; Test 'if'
SETV d2,0; if() #3885 Body Start
STORED d2,1
SETV d2,1; for() #3886 setup
STORED d2,0
LOADD d2,0; for() #3886 LoopTest
COMPAREV d2,32
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 977; for() #3886 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #3886 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
SETR d2,gd25; if() #3889 Test
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
RSHIFTV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
ANDV d2,15
SETV d3,1
LSHIFTR d3,d2
SETR d2,d3
POP d3
ANDR d2,d3
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 971; Test 'if'
SETV d2,0; if() #3889 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2; if() #3889 Body End
LOADD d2,0; for() #3886 Body End AND for() #3886 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 930; for() #3886 End
POPARGS d5,0.0002; if() #3885 Body End
RETURNFUNC; Func[void CleanUpGhostFFCs()] Body End
PUSHARGSR d2,0.0002; Func[void DrawEWeaponShadow(EWeapon)] Body Start
SETR d4,SP
PUSHR d4
LOADD d2,2; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNXOFS
POP d3
ADDR d2,d3
STORED d2,1
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
SUBV d2,1
MULTV d2,16
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNYOFS
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZOFS
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,0
PUSHV 1; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if(true) #4611 [Opt:AlwaysOn]
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,27400
PUSHR d2
PUSHARGSV 1,0.0002
PUSHV 7
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0004
PUSHV 1
PUSHV 64; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
POPARGS d5,0.0003
RETURNFUNC; Func[void DrawEWeaponShadow(EWeapon)] Body End
PUSHARGSR d2,0.0009; Func[void DrawGhostFFCs()] Body Start
SETR d4,SP
SETV d2,1; if() #4614 Test
PUSHR d2
POP d0
SETR d2,SCREENEFLAGSD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1062; Test 'if'
PUSHR d4; unless() #4615 Test AND if() #4614 Body Start
CALLFUNC 0.1269; UsrFunc[bool __HaveAmulet()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 1062; Test 'unless'
GOTO 1267; return (Void) AND unless() #4615 Body
SETV d2,0; if() #4614 Body End
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,1; if() #4618 Test AND if(true) #4617 [Opt:AlwaysOn]
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1088; Test 'if'
SETV d2,1; if() #4618 Body Start
STORED d2,3
GOTO 1090; if() #4618 Body End
SETV d2,2; if() #4618 Else Start
STORED d2,3; if() #4618 Else End
SETV d2,4
STORED d2,2
SETV d2,1; for() #4620 setup
STORED d2,1
LOADD d2,1; for() #4620 LoopTest
PUSHR d2
SETR d2,NPCCOUNT; InlineFunc[int Screen->NumNPCs()] Body
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1267; for() #4620 TestFail?
LOADD d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Params AND for() #4620 Body Start
SUBV d2,1; InlineFunc[NPC Screen->LoadNPC(int)] Body Start
LOADNPCR d2
SETR d2,REFNPC; InlineFunc[NPC Screen->LoadNPC(int)] Body End
STORED d2,6
PUSHR d4
LOADD d2,6; UsrFunc[int __GetDrawingArray(NPC)] Params Start
PUSHR d2; UsrFunc[int __GetDrawingArray(NPC)] Params End
CALLFUNC 0.1289; UsrFunc[int __GetDrawingArray(NPC)] Call
POP d4
STORED d2,8
LOADD d2,8; if() #4624 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1119; Test 'if'
GOTO 1261; continue #4622 AND if() #4624 Body
SETR d2,gd27; if() #4625 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1138; Test 'if'
LOADD d2,8; if() #4626 Test AND if() #4625 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1138; Test 'if'
GOTO 1261; continue #4622 AND if() #4626 Body
LOADD d2,8; if() #4625 Body End AND if() #4627 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1150; Test 'if'
SETV d2,64; if() #4627 Body Start
STORED d2,5
GOTO 1152; if() #4627 Body End
SETV d2,128; if() #4627 Else Start
STORED d2,5; if() #4627 Else End
LOADD d2,8; if() #4629 Test
PUSHR d2
POP d0
READPODARRAYV d2,2
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1164; Test 'if'
LOADD d2,2; if() #4629 Body Start
STORED d2,4
GOTO 1166; if() #4629 Body End
LOADD d2,3; if() #4629 Else Start
STORED d2,4; if() #4629 Else End
SETV d2,3
STORED d2,7
SETV d2,0; for() #4631 setup
STORED d2,0
LOADD d2,0; for() #4631 LoopTest
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,0
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1261; for() #4631 TestFail?
LOADD d2,8; if() #4634 Test AND for() #4631 Body Start
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1200
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1252; Test 'if'
LOADD d2,4; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start AND if() #4634 Body Start
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,1
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,2
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,3
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
LOADD d2,7
ADDV d2,4
POP d0
READPODARRAYR d2,d2
PUSHR d2
LOADD d2,8
PUSHR d2
POP d0
READPODARRAYV d2,1
PUSHR d2
PUSHARGSV -1,0.0002
PUSHARGSV 0,0.0005
PUSHV 1
LOADD d2,5
PUSHR d2; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWCOMBO; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0016; InlineFunc[void Screen->DrawCombo(int, int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End AND if() #4634 Body End
LOADD d2,7
ADDV d2,6
STORED d2,7; for() #4631 Body End
LOADD d2,0; for() #4631 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1170; for() #4631 End
LOADD d2,1; for() #4620 Body End AND for() #4620 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 1094; for() #4620 End
POPARGS d5,0.0009
RETURNFUNC; Func[void DrawGhostFFCs()] Body End
SETR d4,SP; Func[bool __HaveAmulet()] Body Start
SETV d2,50; if() #9257 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1278; Test 'if'
SETV d2,1; return Start AND if() #9257 Body Start
GOTO 1288; return End AND if() #9257 Body End
SETV d2,63; if() #9258 Test
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOTRUE 1286; Test 'if'
SETV d2,1; return Start AND if() #9258 Body Start
GOTO 1288; return End AND if() #9258 Body End
SETV d2,0; return Start
GOTO 1288; return End
RETURNFUNC; Func[bool __HaveAmulet()] Body End
PUSHR d2; Func[int __GetDrawingArray(NPC)] Body Start
SETR d4,SP
LOADD d2,1; if() #8998 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65536
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1305; Test 'if'
SETV d2,0; return Start AND if() #8998 Body Start
GOTO 1328; return End AND if() #8998 Body End
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFNPC
SETR d2,NPCMISCD
ANDV d2,65535
STORED d2,0
LOADD d2,0; if() #8999 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1321; Test 'if'
SETV d2,0; return Start AND if() #8999 Body Start
GOTO 1328; return End AND if() #8999 Body End
LOADD d2,0
PUSHR d2
POP d0
READPODARRAYV d2,23
STORED d2,0
LOADD d2,0; return Start
GOTO 1328; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int __GetDrawingArray(NPC)] Body End
PUSHARGSR d2,0.0002; Func[int FindUnusedFFC()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETV d2,1; for() #4865 setup
STORED d2,0
LOADD d2,0; for() #4865 LoopTest
COMPAREV d2,33
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1386; for() #4865 TestFail?
LOADD d2,0; InlineFunc[FFC Screen->LoadFFC(int)] Params AND for() #4865 Body Start
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,1
LOADD d2,1; if() #4868 Test
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1362
LOADD d2,1
PUSHR d2
POP REFFFC
SETR d2,DATA
COMPAREV d2,1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1382; Test 'if'
LOADD d2,1; unless() #4870 Test AND if() #4868 Body Start
PUSHR d2
POP REFFFC
SETR d2,FFSCRIPT
COMPAREV d2,0
GOTOFALSE 1382; Test 'unless'
LOADD d2,1; unless() #4871 Test AND unless() #4870 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFFFC
SETR d2,FFFLAGSD
COMPAREV d2,0
GOTOFALSE 1382; Test 'unless'
LOADD d2,0; return Start AND unless() #4871 Body Start
GOTO 1388; return End AND unless() #4871 Body End
LOADD d2,0; unless() #4870 Body End AND if() #4868 Body End AND for() #4865 Body End AND for() #4865 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 1336; for() #4865 End
SETV d2,0; return Start
GOTO 1388; return End
POPARGS d5,0.0002
RETURNFUNC; Func[int FindUnusedFFC()] Body End
PUSHR d2; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body Start
SETR d4,SP
LOADD d2,3; if() #4946 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1405; Test 'if'
PUSHR d4; if() #4946 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSprite(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSprite(int)] Params End
CALLFUNC 0.1554; UsrFunc[int GetDefaultEWeaponSprite(int)] Call
POP d4
STORED d2,3; if() #4946 Body End
LOADD d2,2; if() #4947 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1418; Test 'if'
PUSHR d4; if() #4947 Body Start
LOADD d2,9; UsrFunc[int GetDefaultEWeaponSound(int)] Params Start
PUSHR d2; UsrFunc[int GetDefaultEWeaponSound(int)] Params End
CALLFUNC 0.1731; UsrFunc[int GetDefaultEWeaponSound(int)] Call
POP d4
STORED d2,2; if() #4947 Body End
LOADD d2,9; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,7
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,5
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1; if() #4948 Test
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1488; Test 'if'
PUSHR d4; if() #4948 Body Start
LOADD d2,6; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2116; UsrFunc[int __UnblockableDir(int)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
GOTO 1497; if() #4948 Body End
LOADD d2,6; if() #4948 Else Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2; if() #4948 Else End
LOADD d2,3; if() #4951 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1508; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #4951 Body Start
PUSHR d2
LOADD d2,3; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #4951 Body End
LOADD d2,1; if() #4952 Test
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1524; Test 'if'
SETV d2,0; if() #4952 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #4952 Body End
LOADD d2,1; if() #4953 Test
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1535; Test 'if'
PUSHR d4; if() #4953 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #4953 Body End
LOADD d2,1
ORV d2,512
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,2; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
LOADD d2,0; return Start
GOTO 1552; return End
POPARGS d5,0.0010
RETURNFUNC; Func[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Body End
PUSHARGSR d2,0.0003; Func[int GetDefaultEWeaponSprite(int)] Body Start
SETR d4,SP
LOADD d2,3; if() #5017 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1566
LOADD d2,3
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1571; Test 'if'
SETV d2,17; return Start AND if() #5017 Body Start
GOTO 1729; return End AND if() #5017 Body End
LOADD d2,3; if() #5020 Test AND if() #5017 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1578; Test 'if'
SETV d2,18; return Start AND if() #5020 Body Start
GOTO 1729; return End AND if() #5020 Body End
LOADD d2,3; if() #5022 Test AND if() #5020 Else Start
COMPAREV d2,130
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1585; Test 'if'
SETV d2,19; return Start AND if() #5022 Body Start
GOTO 1729; return End AND if() #5022 Body End
LOADD d2,3; if() #5024 Test AND if() #5022 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1592; Test 'if'
SETV d2,35; return Start AND if() #5024 Body Start
GOTO 1729; return End AND if() #5024 Body End
LOADD d2,3; if() #5026 Test AND if() #5024 Else Start
COMPAREV d2,142
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1599; Test 'if'
SETV d2,81; return Start AND if() #5026 Body Start
GOTO 1729; return End AND if() #5026 Body End
LOADD d2,3; if() #5028 Test AND if() #5026 Else Start
COMPAREV d2,139
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1606; Test 'if'
SETV d2,80; return Start AND if() #5028 Body Start
GOTO 1729; return End AND if() #5028 Body End
LOADD d2,3; if() #5030 Test AND if() #5028 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1613; Test 'if'
SETV d2,21; return Start AND if() #5030 Body Start
GOTO 1729; return End AND if() #5030 Body End
LOADD d2,3; if() #5032 Test AND if() #5030 Else Start
COMPAREV d2,132
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1620; Test 'if'
SETV d2,20; return Start AND if() #5032 Body Start
GOTO 1729; return End AND if() #5032 Body End
LOADD d2,3; if() #5034 Test AND if() #5032 Else Start
COMPAREV d2,141
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1627; Test 'if'
SETV d2,36; return Start AND if() #5034 Body Start
GOTO 1729; return End AND if() #5034 Body End
LOADD d2,3; if() #5036 Test AND if() #5034 Else Start
COMPAREV d2,137
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1634; Test 'if'
SETV d2,76; return Start AND if() #5036 Body Start
GOTO 1729; return End AND if() #5036 Body End
LOADD d2,3; if() #5038 Test AND if() #5036 Else Start
COMPAREV d2,138
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1641; Test 'if'
SETV d2,77; return Start AND if() #5038 Body Start
GOTO 1729; return End AND if() #5038 Body End
LOADD d2,3; if() #5040 Test AND if() #5038 Else Start
COMPAREV d2,131
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1727; Test 'if'
SETV d2,0; if() #5040 Body Start
STORED d2,2
SETV d2,0
STORED d2,1
SETV d2,0; for() #5042 setup
STORED d2,0
LOADD d2,0; for() #5042 LoopTest
COMPAREV d2,256
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1709; for() #5042 TestFail?
LOADD d2,0; unless() #5045 Test AND for() #5042 Body Start
PUSHR d2
POP d0
SETR d2,LINKITEMD
COMPAREV d2,0
GOTOFALSE 1666; Test 'unless'
GOTO 1703; continue #5044 AND unless() #5045 Body
LOADD d2,0; InlineFunc[ItemData Game->LoadItemData(int)] Params
LOADITEMDATAR d2; InlineFunc[ItemData Game->LoadItemData(int)] Body Start
SETR d2,REFITEMCLASS; InlineFunc[ItemData Game->LoadItemData(int)] Body End
STORED d2,1
LOADD d2,1; if() #5046 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATAFAMILY
COMPAREV d2,1
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1679; Test 'if'
GOTO 1703; continue #5044 AND if() #5046 Body
LOADD d2,1; if() #5047 Test
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1703; Test 'if'
LOADD d2,1; if() #5047 Body Start
PUSHR d2
POP REFITEMCLASS
SETR d2,IDATALEVEL
STORED d2,2
LOADD d2,2; if() #5048 Test
COMPAREV d2,3
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1703; Test 'if'
GOTO 1709; break #5043 AND if() #5048 Body
LOADD d2,0; if() #5047 Body End AND for() #5042 Body End AND for() #5042 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 1652; for() #5042 End
LOADD d2,2; if() #5049 Test
COMPAREV d2,1
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1717; Test 'if'
SETV d2,4; return Start AND if() #5049 Body Start
GOTO 1729; return End
GOTO 1726; if() #5049 Body End
LOADD d2,2; if() #5051 Test AND if() #5049 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1725; Test 'if'
SETV d2,5; return Start AND if() #5051 Body Start
GOTO 1729; return End
GOTO 1726; if() #5051 Body End
SETV d2,6; return Start AND if() #5051 Else Start
GOTO 1729; return End AND if() #5051 Else End AND if() #5049 Else End AND if() #5040 Body End
SETV d2,0; return Start AND if() #5040 Else Start
GOTO 1729; return End AND if() #5040 Else End
POPARGS d5,0.0004; if() #5038 Else End AND if() #5036 Else End AND if() #5034 Else End AND if() #5032 Else End AND if() #5030 Else End AND if() #5028 Else End AND if() #5026 Else End AND if() #5024 Else End AND if() #5022 Else End AND if() #5020 Else End AND if() #5017 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSprite(int)] Body End
SETR d4,SP; Func[int GetDefaultEWeaponSound(int)] Body Start
LOADD d2,0; if() #5004 Test
COMPAREV d2,129
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1742
LOADD d2,0
COMPAREV d2,145
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1747; Test 'if'
SETV d2,40; return Start AND if() #5004 Body Start
GOTO 1794; return End AND if() #5004 Body End
LOADD d2,0; if() #5007 Test AND if() #5004 Else Start
COMPAREV d2,134
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1757
LOADD d2,0
COMPAREV d2,141
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1762; Test 'if'
SETV d2,32; return Start AND if() #5007 Body Start
GOTO 1794; return End AND if() #5007 Body End
LOADD d2,0; if() #5010 Test AND if() #5007 Else Start
COMPAREV d2,140
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1772
LOADD d2,0
COMPAREV d2,142
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 1780
LOADD d2,0
COMPAREV d2,139
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1785; Test 'if'
SETV d2,13; return Start AND if() #5010 Body Start
GOTO 1794; return End AND if() #5010 Body End
LOADD d2,0; if() #5014 Test AND if() #5010 Else Start
COMPAREV d2,133
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1792; Test 'if'
SETV d2,51; return Start AND if() #5014 Body Start
GOTO 1794; return End AND if() #5014 Body End
SETV d2,0; return Start AND if() #5014 Else Start
GOTO 1794; return End AND if() #5014 Else End
POPARGS d5,0.0001; if() #5010 Else End AND if() #5007 Else End AND if() #5004 Else End
RETURNFUNC; Func[int GetDefaultEWeaponSound(int)] Body End
PUSHARGSR d2,0.0002; Func[void SetEWeaponDir(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,1
SETV d2,0
STORED d2,0
LOADD d2,1; if() #7931 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1816; Test 'if'
LOADD d2,1; if() #7931 Body Start
ADDV d2,6.2832
STORED d2,1; if() #7931 Body End
LOADD d2,1; if() #7932 Test
COMPAREV d2,0.3927
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1830
LOADD d2,1
COMPAREV d2,5.8905
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1836; Test 'if'
SETV d2,3; if() #7932 Body Start
STORED d2,0
GOTO 1898; if() #7932 Body End
LOADD d2,1; if() #7935 Test AND if() #7932 Else Start
COMPAREV d2,1.1781
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1846; Test 'if'
SETV d2,7; if() #7935 Body Start
STORED d2,0
GOTO 1898; if() #7935 Body End
LOADD d2,1; if() #7937 Test AND if() #7935 Else Start
COMPAREV d2,1.9635
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1856; Test 'if'
SETV d2,1; if() #7937 Body Start
STORED d2,0
GOTO 1898; if() #7937 Body End
LOADD d2,1; if() #7939 Test AND if() #7937 Else Start
COMPAREV d2,2.7489
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1866; Test 'if'
SETV d2,6; if() #7939 Body Start
STORED d2,0
GOTO 1898; if() #7939 Body End
LOADD d2,1; if() #7941 Test AND if() #7939 Else Start
COMPAREV d2,3.5343
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1876; Test 'if'
SETV d2,2; if() #7941 Body Start
STORED d2,0
GOTO 1898; if() #7941 Body End
LOADD d2,1; if() #7943 Test AND if() #7941 Else Start
COMPAREV d2,4.3197
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1886; Test 'if'
SETV d2,4; if() #7943 Body Start
STORED d2,0
GOTO 1898; if() #7943 Body End
LOADD d2,1; if() #7945 Test AND if() #7943 Else Start
COMPAREV d2,5.1051
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1896; Test 'if'
SETV d2,0; if() #7945 Body Start
STORED d2,0
GOTO 1898; if() #7945 Body End
SETV d2,5; if() #7945 Else Start
STORED d2,0; if() #7945 Else End
LOADD d2,2; if() #7943 Else End AND if() #7941 Else End AND if() #7939 Else End AND if() #7937 Else End AND if() #7935 Else End AND if() #7932 Else End AND if() #7947 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 1916; Test 'if'
PUSHR d4; if() #7947 Body Start
LOADD d2,0; UsrFunc[int __UnblockableDir(int)] Params Start
PUSHR d2; UsrFunc[int __UnblockableDir(int)] Params End
CALLFUNC 0.2116; UsrFunc[int __UnblockableDir(int)] Call
POP d4
STORED d2,0; if() #7947 Body End
LOADD d2,0
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDIR,d2
POPARGS d5,0.0003
RETURNFUNC; Func[void SetEWeaponDir(EWeapon)] Body End
PUSHR d2; Func[void SetEWeaponRotation(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #7998 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 2020; Test 'if'
LOADD d2,1; if() #7998 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,0
LOADD d2,0; if() #8000 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 1951; Test 'if'
LOADD d2,0; if() #8000 Body Start
ADDV d2,6.2832
STORED d2,0; if() #8000 Body End
LOADD d2,0; if() #8001 Test
COMPAREV d2,0.7854
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 1965
LOADD d2,0
COMPAREV d2,5.4978
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 1978; Test 'if'
SETV d2,4; if() #8001 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2019; if() #8001 Body End
LOADD d2,0; if() #8004 Test AND if() #8001 Else Start
COMPAREV d2,2.3562
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 1993; Test 'if'
SETV d2,3; if() #8004 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2019; if() #8004 Body End
LOADD d2,0; if() #8006 Test AND if() #8004 Else Start
COMPAREV d2,3.9270
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2010; Test 'if'
SETV d2,7; if() #8006 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2019; if() #8006 Body End
SETV d2,0; if() #8006 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8006 Else End
GOTO 2114; if() #8004 Else End AND if() #8001 Else End AND if() #7998 Body End
PUSHR d4; if() #7998 Else Start
LOADD d2,1; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2177; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8008 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2038
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2046
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2059; Test 'if'
SETV d2,0; if() #8008 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2114; if() #8008 Body End
LOADD d2,0; if() #8012 Test AND if() #8008 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2069
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2077
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2090; Test 'if'
SETV d2,3; if() #8012 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2114; if() #8012 Body End
LOADD d2,0; if() #8016 Test AND if() #8012 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2105; Test 'if'
SETV d2,7; if() #8016 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2114; if() #8016 Body End
SETV d2,4; if() #8016 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8016 Else End
POPARGS d5,0.0002; if() #8012 Else End AND if() #8008 Else End AND if() #7998 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon)] Body End
SETR d4,SP; Func[int __UnblockableDir(int)] Body Start
LOADD d2,0; if() #9291 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2124; Test 'if'
SETV d2,8; return Start AND if() #9291 Body Start
GOTO 2175; return End AND if() #9291 Body End
LOADD d2,0; if() #9292 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2131; Test 'if'
SETV d2,12; return Start AND if() #9292 Body Start
GOTO 2175; return End AND if() #9292 Body End
LOADD d2,0; if() #9293 Test
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2138; Test 'if'
SETV d2,14; return Start AND if() #9293 Body Start
GOTO 2175; return End AND if() #9293 Body End
LOADD d2,0; if() #9294 Test
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2145; Test 'if'
SETV d2,10; return Start AND if() #9294 Body Start
GOTO 2175; return End AND if() #9294 Body End
LOADD d2,0; if() #9295 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2152; Test 'if'
SETV d2,15; return Start AND if() #9295 Body Start
GOTO 2175; return End AND if() #9295 Body End
LOADD d2,0; if() #9296 Test
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2159; Test 'if'
SETV d2,9; return Start AND if() #9296 Body Start
GOTO 2175; return End AND if() #9296 Body End
LOADD d2,0; if() #9297 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2166; Test 'if'
SETV d2,13; return Start AND if() #9297 Body Start
GOTO 2175; return End AND if() #9297 Body End
LOADD d2,0; if() #9298 Test
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2173; Test 'if'
SETV d2,11; return Start AND if() #9298 Body Start
GOTO 2175; return End AND if() #9298 Body End
LOADD d2,0; return Start
GOTO 2175; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int __UnblockableDir(int)] Body End
SETR d4,SP; Func[int __NormalizeDir(int)] Body Start
LOADD d2,0; if() #9271 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2187
LOADD d2,0
COMPAREV d2,7
SETLESSI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2193; Test 'if'
LOADD d2,0; return Start AND if() #9271 Body Start
GOTO 2251; return End AND if() #9271 Body End
LOADD d2,0; if() #9273 Test
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2200; Test 'if'
SETV d2,0; return Start AND if() #9273 Body Start
GOTO 2251; return End AND if() #9273 Body End
LOADD d2,0; if() #9274 Test
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2207; Test 'if'
SETV d2,5; return Start AND if() #9274 Body Start
GOTO 2251; return End AND if() #9274 Body End
LOADD d2,0; if() #9275 Test
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2214; Test 'if'
SETV d2,3; return Start AND if() #9275 Body Start
GOTO 2251; return End AND if() #9275 Body End
LOADD d2,0; if() #9276 Test
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2221; Test 'if'
SETV d2,7; return Start AND if() #9276 Body Start
GOTO 2251; return End AND if() #9276 Body End
LOADD d2,0; if() #9277 Test
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2228; Test 'if'
SETV d2,1; return Start AND if() #9277 Body Start
GOTO 2251; return End AND if() #9277 Body End
LOADD d2,0; if() #9278 Test
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2235; Test 'if'
SETV d2,6; return Start AND if() #9278 Body Start
GOTO 2251; return End AND if() #9278 Body End
LOADD d2,0; if() #9279 Test
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2242; Test 'if'
SETV d2,2; return Start AND if() #9279 Body Start
GOTO 2251; return End AND if() #9279 Body End
LOADD d2,0; if() #9280 Test
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2249; Test 'if'
SETV d2,4; return Start AND if() #9280 Body Start
GOTO 2251; return End AND if() #9280 Body End
SETV d2,0; return Start
GOTO 2251; return End
POPARGS d5,0.0001
RETURNFUNC; Func[int __NormalizeDir(int)] Body End
SETR d4,SP; Func[bool IsSideview()] Body Start
SETV d2,0; return Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
PUSHR d2
SETR d2,CURDMAP; InlineFunc[DMapData Game->LoadDMapData(int)] Params
LOADDMAPDATAR d2; InlineFunc[DMapData Game->LoadDMapData(int)] Body Start
SETR d2,REFDMAPDATA; InlineFunc[DMapData Game->LoadDMapData(int)] Body End
PUSHR d2
POP REFDMAPDATA
SETR d2,DMAPDATASIDEVIEW
POP d3
CASTBOOLF d2
CASTBOOLF d3
COMPARER d3,d2
SETFALSEI d2
GOTO 2272; return End
RETURNFUNC; Func[bool IsSideview()] Body End
SETR d4,SP; Func[void InitializeGhostZHData()] Body Start
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETV d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
RETURNFUNC; Func[void InitializeGhostZHData()] Body End
SETR d4,SP; Func[void KillEWeapon(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,128
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void KillEWeapon(EWeapon)] Body End
PUSHARGSR d2,0.0005; Func[int __GetEWeaponThrowHeight(EWeapon)] Body Start
SETR d4,SP
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
STORED d2,4
LOADD d2,4; if() #9001 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2354; Test 'if'
SETV d2,1; return Start AND if() #9001 Body Start
GOTO 2456; return End AND if() #9001 Body End
PUSHR d4
LOADD d2,5; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHXSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,5
PUSHR d2
POP REFEWPN
SETR d2,EWPNHYSZ
DIVV d2,2
POP d3
ADDR d2,d3
PUSHR d2
SETR d2,LINKX
ADDV d2,8
PUSHR d2
SETR d2,LINKY
ADDV d2,8
PUSHR d2; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0017; Int.Func[int Distance(int, int, int, int)] Call
POP d4
STORED d2,3
LOADD d2,3; if() #9002 Test
COMPAREV d2,1
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2399; Test 'if'
SETV d2,1; return Start AND if() #9002 Body Start
GOTO 2456; return End AND if() #9002 Body End
LOADD d2,3
PUSHR d2
LOADD d2,4
POP d3
DIVR d3,d2
SETR d2,d3
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,1; while() #9003 Test
COMPAREV d2,3.2000
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2427; Test 'while'
LOADD d2,1; while() #9003 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,2
SUBV d2,2
STORED d2,2
LOADD d2,2; if() #9005 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2426; Test 'if'
LOADD d2,1; return Start AND if() #9005 Body Start
GOTO 2456; return End AND if() #9005 Body End
GOTO 2408; while() #9003 Body End AND while() #9003 End
SETV d2,0
STORED d2,0
LOADD d2,2; while() #9006 Test
PUSHR d2
LOADD d2,0
DIVV d2,3.2000
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2454; Test 'while'
LOADD d2,1; while() #9006 Body Start
ADDV d2,0.1600
STORED d2,1
LOADD d2,0
PUSHR d2
LOADD d2,1
SUBV d2,3.2000
POP d3
ADDR d2,d3
STORED d2,0
LOADD d2,2
SUBV d2,2
STORED d2,2; while() #9006 Body End
GOTO 2429; while() #9006 End
LOADD d2,1; return Start
GOTO 2456; return End
POPARGS d5,0.0006
RETURNFUNC; Func[int __GetEWeaponThrowHeight(EWeapon)] Body End
SETR d4,SP; Func[void SetEWeaponRotation(EWeapon, int)] Body Start
PUSHR d4
LOADD d2,0; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2177; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8020 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2475
LOADD d2,0
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2483
LOADD d2,0
COMPAREV d2,4
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2496; Test 'if'
SETV d2,0; if() #8020 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2551; if() #8020 Body End
LOADD d2,0; if() #8024 Test AND if() #8020 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 2506
LOADD d2,0
COMPAREV d2,7
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 2514
LOADD d2,0
COMPAREV d2,6
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 2527; Test 'if'
SETV d2,3; if() #8024 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2551; if() #8024 Body End
LOADD d2,0; if() #8028 Test AND if() #8024 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2542; Test 'if'
SETV d2,7; if() #8028 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2
GOTO 2551; if() #8028 Body End
SETV d2,4; if() #8028 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNFLIP,d2; if() #8028 Else End
POPARGS d5,0.0002; if() #8024 Else End AND if() #8020 Else End
RETURNFUNC; Func[void SetEWeaponRotation(EWeapon, int)] Body End
SETR d4,SP; Func[int Sign(int)] Body Start
LOADD d2,0; if() #8492 Test
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2563; Test 'if'
SETV d2,1; return Start AND if() #8492 Body Start
GOTO 2574; return End AND if() #8492 Body End
LOADD d2,0; if() #8494 Test AND if() #8492 Else Start
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2572; Test 'if'
SETV d2,-1; return Start AND if() #8494 Body Start
GOTO 2574; return End AND if() #8494 Body End
SETV d2,0; return Start AND if() #8494 Else Start
GOTO 2574; return End AND if() #8494 Else End
POPARGS d5,0.0001; if() #8492 Else End
RETURNFUNC; Func[int Sign(int)] Body End
SETR d4,SP; Func[void StartGhostZH()] Body Start
PUSHR d4
CALLFUNC 0.2273; UsrFunc[void InitializeGhostZHData()] Call
POP d4
RETURNFUNC; Func[void StartGhostZH()] Body End
PUSHARGSR d2,0.0007; Func[void UpdateEWeapon(EWeapon)] Body Start
SETR d4,SP
SETR d2,gd27; if() #8617 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2593; Test 'if'
GOTO 3742; return (Void) AND if() #8617 Body
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
STORED d2,6
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
STORED d2,5
SETV d2,1
STORED d2,4
LOADD d2,7; if() #8618 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,128
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2993; Test 'if'
LOADD d2,7; if() #8620 Test AND if() #8618 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2840; Test 'if'
LOADD d2,7; if() #8621 Test AND if() #8620 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2713; Test 'if'
LOADD d2,7; if() #8623 Test AND if() #8621 Body Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2656; Test 'if'
PUSHR d4; if() #8623 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Params End
CALLFUNC 0.3744; UsrFunc[void __UpdateEWMSineWave(EWeapon)] Call
POP d4
GOTO 2712; if() #8623 Body End
LOADD d2,7; if() #8626 Test AND if() #8623 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2673; Test 'if'
PUSHR d4; if() #8626 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHoming(EWeapon)] Params End
CALLFUNC 0.3927; UsrFunc[void __UpdateEWMHoming(EWeapon)] Call
POP d4
GOTO 2712; if() #8626 Body End
LOADD d2,7; if() #8629 Test AND if() #8626 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2690; Test 'if'
PUSHR d4; if() #8629 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Params End
CALLFUNC 0.4147; UsrFunc[void __UpdateEWMHomingReaim(EWeapon)] Call
POP d4
GOTO 2712; if() #8629 Body End
LOADD d2,7; if() #8632 Test AND if() #8629 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2707; Test 'if'
PUSHR d4; if() #8632 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandom(EWeapon)] Params End
CALLFUNC 0.4490; UsrFunc[void __UpdateEWMRandom(EWeapon)] Call
POP d4
GOTO 2712; if() #8632 Body End
PUSHR d4; if() #8632 Else Start
LOADD d2,7; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Params End
CALLFUNC 0.4614; UsrFunc[void __UpdateEWMRandomReaim(EWeapon)] Call
POP d4; if() #8632 Else End
GOTO 2840; if() #8629 Else End AND if() #8626 Else End AND if() #8623 Else End AND if() #8621 Body End
LOADD d2,7; if() #8636 Test AND if() #8621 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2748; Test 'if'
LOADD d2,7; if() #8636 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMVeer(EWeapon)] Params End
CALLFUNC 0.4934; UsrFunc[void __UpdateEWMVeer(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2840; if() #8636 Body End
LOADD d2,7; if() #8639 Test AND if() #8636 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2765; Test 'if'
PUSHR d4; if() #8639 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMThrow(EWeapon)] Params End
CALLFUNC 0.5466; UsrFunc[void __UpdateEWMThrow(EWeapon)] Call
POP d4
GOTO 2840; if() #8639 Body End
LOADD d2,7; if() #8642 Test AND if() #8639 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,19
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2782; Test 'if'
PUSHR d4; if() #8642 Body Start
LOADD d2,7; UsrFunc[void __UpdateEWMFall(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMFall(EWeapon)] Params End
CALLFUNC 0.5779; UsrFunc[void __UpdateEWMFall(EWeapon)] Call
POP d4
GOTO 2840; if() #8642 Body End
LOADD d2,7; if() #8645 Test AND if() #8642 Else Start
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,20
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2817; Test 'if'
LOADD d2,7; if() #8645 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDrift(EWeapon)] Params End
CALLFUNC 0.6048; UsrFunc[void __UpdateEWMDrift(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4
GOTO 2840; if() #8645 Body End
LOADD d2,7; if() #8645 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,6
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,5
PUSHR d4
LOADD d2,7; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Params End
CALLFUNC 0.6552; UsrFunc[void __UpdateEWMDriftWait(EWeapon)] Call
POP d4
SETV d2,0
STORED d2,4; if() #8645 Else End
LOADD d2,7; if() #8642 Else End AND if() #8639 Else End AND if() #8636 Else End AND if() #8621 Else End AND if() #8620 Body End AND if() #8649 Test
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 2992; Test 'if'
LOADD d2,7; if() #8650 Test AND if() #8649 Body Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2898; Test 'if'
LOADD d2,7; if() #8650 Body Start
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,7; if() #8652 Test
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2897; Test 'if'
PUSHR d4; if() #8652 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8652 Body End
GOTO 2992; if() #8650 Body End
LOADD d2,7; if() #8653 Test AND if() #8650 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2943; Test 'if'
PUSHR d4; if() #8655 Test AND if() #8653 Body Start
LOADD d2,7; Int.Func[int Distance(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; Int.Func[int Distance(int, int, int, int)] Params End
CALLFUNC 0.0017; Int.Func[int Distance(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2942; Test 'if'
PUSHR d4; if() #8655 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8655 Body End
GOTO 2992; if() #8653 Body End
LOADD d2,7; if() #8656 Test AND if() #8653 Else Start
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 2992; Test 'if'
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params Start AND if() #8656 Body Start
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
PUSHR d2
LOADD d2,7
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
PUSHVARGR d3; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,7; if() #8657 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 2992; Test 'if'
PUSHR d4; if() #8657 Body Start
LOADD d2,7; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #8657 Body End
GOTO 3309; if() #8656 Body End AND if() #8653 Else End AND if() #8650 Else End AND if() #8649 Body End AND if() #8618 Body End
LOADD d2,7; if() #8658 Test AND if() #8618 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3015
LOADD d2,7
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1024
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3309; Test 'if'
LOADD d2,7; if() #8660 Test AND if() #8658 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3038; Test 'if'
PUSHR d4; if() #8660 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Params End
CALLFUNC 0.7089; UsrFunc[void __DoEWeaponDeathPrototype(EWeapon)] Call
POP d4
GOTO 3309; if() #8660 Body End
LOADD d2,7; if() #8663 Test AND if() #8660 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3174; Test 'if'
LOADD d2,7; if() #8665 Test AND if() #8663 Body Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3072; Test 'if'
SETV d2,0; if() #8665 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 3173; if() #8665 Body End
LOADD d2,7; if() #8667 Test AND if() #8665 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3089; Test 'if'
PUSHR d4; if() #8667 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Params End
CALLFUNC 0.7521; UsrFunc[void __DoEWeaponDeathAimAtLink(EWeapon)] Call
POP d4
GOTO 3173; if() #8667 Body End
LOADD d2,7; if() #8670 Test AND if() #8667 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3106; Test 'if'
PUSHR d4; if() #8670 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Params End
CALLFUNC 0.7688; UsrFunc[void __DoEWeaponDeathExplode(EWeapon)] Call
POP d4
GOTO 3173; if() #8670 Body End
LOADD d2,7; if() #8673 Test AND if() #8670 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3123; Test 'if'
PUSHR d4; if() #8673 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Params End
CALLFUNC 0.7732; UsrFunc[void __DoEWeaponDeathSBombExplode(EWeapon)] Call
POP d4
GOTO 3173; if() #8673 Body End
LOADD d2,7; if() #8676 Test AND if() #8673 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3140; Test 'if'
PUSHR d4; if() #8676 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Params End
CALLFUNC 0.7776; UsrFunc[void __DoEWeaponDeath4FireballsHV(EWeapon)] Call
POP d4
GOTO 3173; if() #8676 Body End
LOADD d2,7; if() #8679 Test AND if() #8676 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3157; Test 'if'
PUSHR d4; if() #8679 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Params End
CALLFUNC 0.7839; UsrFunc[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Call
POP d4
GOTO 3173; if() #8679 Body End
LOADD d2,7; if() #8682 Test AND if() #8679 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3173; Test 'if'
PUSHR d4; if() #8682 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Params End
CALLFUNC 0.7902; UsrFunc[void __DoEWeaponDeath4FireballsRand(EWeapon)] Call
POP d4; if() #8682 Body End
GOTO 3309; if() #8679 Else End AND if() #8676 Else End AND if() #8673 Else End AND if() #8670 Else End AND if() #8667 Else End AND if() #8665 Else End AND if() #8663 Body End
LOADD d2,7; if() #8684 Test AND if() #8663 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,8
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3191; Test 'if'
PUSHR d4; if() #8684 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Params End
CALLFUNC 0.8022; UsrFunc[void __DoEWeaponDeath8Fireballs(EWeapon)] Call
POP d4
GOTO 3309; if() #8684 Body End
LOADD d2,7; if() #8687 Test AND if() #8684 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,9
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3208; Test 'if'
PUSHR d4; if() #8687 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Params End
CALLFUNC 0.8085; UsrFunc[void __DoEWeaponDeath4FiresHV(EWeapon)] Call
POP d4
GOTO 3309; if() #8687 Body End
LOADD d2,7; if() #8690 Test AND if() #8687 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,10
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3225; Test 'if'
PUSHR d4; if() #8690 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Params End
CALLFUNC 0.8150; UsrFunc[void __DoEWeaponDeath4FiresDiag(EWeapon)] Call
POP d4
GOTO 3309; if() #8690 Body End
LOADD d2,7; if() #8693 Test AND if() #8690 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,11
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3242; Test 'if'
PUSHR d4; if() #8693 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Params End
CALLFUNC 0.8215; UsrFunc[void __DoEWeaponDeath4FiresRand(EWeapon)] Call
POP d4
GOTO 3309; if() #8693 Body End
LOADD d2,7; if() #8696 Test AND if() #8693 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,12
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3259; Test 'if'
PUSHR d4; if() #8696 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Params End
CALLFUNC 0.8337; UsrFunc[void __DoEWeaponDeath8Fires(EWeapon)] Call
POP d4
GOTO 3309; if() #8696 Body End
LOADD d2,7; if() #8699 Test AND if() #8696 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,13
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3276; Test 'if'
PUSHR d4; if() #8699 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Params End
CALLFUNC 0.8452; UsrFunc[void __DoEWeaponDeathSpawnNPC(EWeapon)] Call
POP d4
GOTO 3309; if() #8699 Body End
LOADD d2,7; if() #8702 Test AND if() #8699 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,14
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3293; Test 'if'
PUSHR d4; if() #8702 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Params End
CALLFUNC 0.8499; UsrFunc[void __DoEWeaponDeathSingleFire(EWeapon)] Call
POP d4
GOTO 3309; if() #8702 Body End
LOADD d2,7; if() #8705 Test AND if() #8702 Else Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3309; Test 'if'
PUSHR d4; if() #8705 Body Start
LOADD d2,7; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Params End
CALLFUNC 0.8550; UsrFunc[void __DoEWeaponDeathRunScript(EWeapon)] Call
POP d4; if() #8705 Body End
LOADD d2,7; if() #8702 Else End AND if() #8699 Else End AND if() #8696 Else End AND if() #8693 Else End AND if() #8690 Else End AND if() #8687 Else End AND if() #8684 Else End AND if() #8663 Else End AND if() #8660 Else End AND if() #8658 Body End AND if() #8618 Else End AND if() #8707 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3336; Test 'if'
LOADD d2,7; if() #8708 Test AND if() #8707 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3336; Test 'if'
PUSHR d4; if() #8708 Body Start
LOADD d2,7; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0979; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #8708 Body End
LOADD d2,7; if() #8707 Body End AND if() #8709 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3633; Test 'if'
SETV d2,1000; if() #8709 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
SETR d2,LINKHP; if() #8711 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 3363; Test 'if'
GOTO 3742; return (Void) AND if() #8711 Body
LOADD d2,7; if() #8712 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3383
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3388; Test 'if'
GOTO 3742; return (Void) AND if() #8712 Body
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
LOADD d2,7; if() #8714 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 3407; Test 'if'
LOADD d2,7; InlineFunc[int RadtoDeg(int)] Params Start AND if() #8714 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 3473; if() #8714 Body End
PUSHR d4; if() #8714 Else Start
LOADD d2,7; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2177; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #8716 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3423; Test 'if'
SETV d2,-90; if() #8716 Body Start
STORED d2,1
GOTO 3473; if() #8716 Body End
LOADD d2,0; if() #8718 Test AND if() #8716 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3431; Test 'if'
SETV d2,-45; if() #8718 Body Start
STORED d2,1
GOTO 3473; if() #8718 Body End
LOADD d2,0; if() #8720 Test AND if() #8718 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3439; Test 'if'
SETV d2,0; if() #8720 Body Start
STORED d2,1
GOTO 3473; if() #8720 Body End
LOADD d2,0; if() #8722 Test AND if() #8720 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3447; Test 'if'
SETV d2,45; if() #8722 Body Start
STORED d2,1
GOTO 3473; if() #8722 Body End
LOADD d2,0; if() #8724 Test AND if() #8722 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3455; Test 'if'
SETV d2,90; if() #8724 Body Start
STORED d2,1
GOTO 3473; if() #8724 Body End
LOADD d2,0; if() #8726 Test AND if() #8724 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3463; Test 'if'
SETV d2,135; if() #8726 Body Start
STORED d2,1
GOTO 3473; if() #8726 Body End
LOADD d2,0; if() #8728 Test AND if() #8726 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3471; Test 'if'
SETV d2,180; if() #8728 Body Start
STORED d2,1
GOTO 3473; if() #8728 Body End
SETV d2,-135; if() #8728 Else Start
STORED d2,1; if() #8728 Else End
LOADD d2,4; if() #8726 Else End AND if() #8724 Else End AND if() #8722 Else End AND if() #8720 Else End AND if() #8718 Else End AND if() #8716 Else End AND if() #8714 Else End AND if() #8730 Test
COMPAREV d2,0
GOTOTRUE 3515; Test 'if'
LOADD d2,7; if() #8730 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Cos(int)] Params Start
SETR d3,d2; InlineFunc[int Cos(int)] Params End
COSR d2,d3; InlineFunc[int Cos(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,3
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
SETR d3,d2; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,2
GOTO 3531; if() #8730 Body End
LOADD d2,7; if() #8730 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,3
LOADD d2,7
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,2; if() #8730 Else End
LOADD d2,6; unless() #8732 Test
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3546
LOADD d2,5
PUSHR d2
LOADD d2,2
POP d3
COMPARER d3,d2
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 3562; Test 'unless'
PUSHR d4; unless() #8732 Body Start
LOADD d2,6; UsrFunc[int Angle(int, int, int, int)] Params Start
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2; UsrFunc[int Angle(int, int, int, int)] Params End
CALLFUNC 0.0050; UsrFunc[int Angle(int, int, int, int)] Call
POP d4
STORED d2,1; unless() #8732 Body End
SETV d2,0
STORED d2,0
LOADD d2,1; if() #8734 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3575
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 3582; Test 'if'
SETV d2,0; if() #8734 Body Start
STORED d2,0
GOTO 3584; if() #8734 Body End
SETV d2,2; if() #8734 Else Start
STORED d2,0; if() #8734 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTXSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNTYSZ
LOADD d2,7
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,3
PUSHR d2
LOADD d2,2
PUSHR d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 3690; if() #8709 Body End
LOADD d2,7; if() #8737 Test AND if() #8709 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3673; Test 'if'
SETR d2,gd27; if() #8738 Test AND if() #8737 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3664; Test 'if'
SETV d2,1000; if() #8738 Body Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 3673; if() #8738 Body End
SETV d2,0; if() #8738 Else Start
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #8738 Else End
LOADD d2,7; if() #8737 Body End AND if() #8740 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 3690; Test 'if'
PUSHR d4; if() #8740 Body Start
LOADD d2,7; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #8740 Body End
LOADD d2,7; if() #8709 Else End AND if() #8741 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,64
COMPAREV d2,0
SETFALSEI d2
CASTBOOLI d2
COMPAREV d2,0
GOTOTRUE 3742; Test 'if'
LOADD d2,7; if() #8741 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,7
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
SUBV2 0,d2
PUSHR d2
LOADD d2,7
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; if() #8741 Body End
POPARGS d5,0.0008
RETURNFUNC; Func[void UpdateEWeapon(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMSineWave(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1; InlineFunc[int Sin(int)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d3,EWPNMISCD; InlineFunc[int Sin(int)] Params End
SINR d2,d3; InlineFunc[int Sin(int)] Body
POP d3
MULTR d2,d3
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,1.5708
SETR d3,d2; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMSineWave(EWeapon)] Body End
PUSHARGSR d2,0.0003; Func[void __UpdateEWMHoming(EWeapon)] Body Start
SETR d4,SP
LOADD d2,3
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
MODV d2,6.2832
STORED d2,2
LOADD d2,2; if() #9347 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3945; Test 'if'
LOADD d2,2; if() #9347 Body Start
ADDV d2,6.2832
STORED d2,2; if() #9347 Body End
PUSHR d4
LOADD d2,3; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,3
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0023; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
STORED d2,1
LOADD d2,1; if() #9348 Test
COMPAREV d2,0
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 3969; Test 'if'
LOADD d2,1; if() #9348 Body Start
ADDV d2,6.2832
STORED d2,1; if() #9348 Body End
LOADD d2,2; InlineFunc[int Abs(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
SETR d2,d3; InlineFunc[int Abs(int)] Params End
ABS d2; InlineFunc[int Abs(int)] Body
STORED d2,0
LOADD d2,0; if() #9349 Test
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 4010
LOADD d2,0
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 6.2832,d2
POP d3
COMPARER d3,d2
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 4023; Test 'if'
LOADD d2,1; if() #9349 Body Start
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4090; if() #9349 Body End
PUSHR d4; if() #9352 Test AND if() #9349 Else Start
LOADD d2,2; UsrFunc[int Sign(int)] Params Start
PUSHR d2
LOADD d2,1
POP d3
SUBR d3,d2
PUSHR d3; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2553; UsrFunc[int Sign(int)] Call
POP d4
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Sign(int)] Params Start
SUBV d2,3.1416
PUSHR d2; UsrFunc[int Sign(int)] Params End
CALLFUNC 0.2553; UsrFunc[int Sign(int)] Call
POP d4
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4067; Test 'if'
LOADD d2,3; if() #9352 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4090; if() #9352 Body End
LOADD d2,3; if() #9352 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
LOADD d2,3
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2; if() #9352 Else End
PUSHR d4; if() #9349 Else End
LOADD d2,3; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,3; if() #9354 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4145; Test 'if'
LOADD d2,3; if() #9354 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,3; if() #9355 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4145; Test 'if'
PUSHR d4; if() #9355 Body Start
LOADD d2,3; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9355 Body End
POPARGS d5,0.0004; if() #9354 Body End
RETURNFUNC; Func[void __UpdateEWMHoming(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMHomingReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #9357 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4178; Test 'if'
LOADD d2,1; if() #9357 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9357 Body End
LOADD d2,1; if() #9358 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4283; Test 'if'
LOADD d2,1; if() #9358 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9360 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4282; Test 'if'
LOADD d2,1; if() #9361 Test AND if() #9360 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4240; Test 'if'
PUSHR d4; if() #9361 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4282; if() #9361 Body End
LOADD d2,1; if() #9361 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9361 Else End
GOTO 4488; if() #9360 Body End AND if() #9358 Body End
LOADD d2,1; if() #9358 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9363 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4385; Test 'if'
SETV d2,45; if() #9363 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0023; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #9364 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4385; Test 'if'
PUSHR d4; if() #9364 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9364 Body End
LOADD d2,1; if() #9363 Body End AND if() #9365 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4411; Test 'if'
LOADD d2,1; if() #9365 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4488; if() #9365 Body End
LOADD d2,1; if() #9367 Test AND if() #9365 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4488; Test 'if'
LOADD d2,1; if() #9367 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.2000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #9368 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4458; Test 'if'
PUSHR d4; if() #9368 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4488; if() #9368 Body End
LOADD d2,0; if() #9370 Test AND if() #9368 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4470; Test 'if'
PUSHR d4; if() #9370 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4488; if() #9370 Body End
LOADD d2,0; if() #9372 Test AND if() #9370 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4482; Test 'if'
PUSHR d4; if() #9372 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4488; if() #9372 Body End
PUSHR d4; if() #9372 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9372 Else End
POPARGS d5,0.0002; if() #9370 Else End AND if() #9368 Else End AND if() #9367 Body End AND if() #9365 Else End AND if() #9358 Else End
RETURNFUNC; Func[void __UpdateEWMHomingReaim(EWeapon)] Body End
SETR d4,SP; Func[void __UpdateEWMRandom(EWeapon)] Body Start
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int Randf(int)] Params Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,2
SETV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
MULTR d2,d3
PUSHR d2; UsrFunc[int Randf(int)] Params End
CALLFUNC 0.0041; UsrFunc[int Randf(int)] Call
POP d4
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0; if() #9375 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4562; Test 'if'
PUSHR d4; if() #9375 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9375 Body End
LOADD d2,0; if() #9376 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4612; Test 'if'
LOADD d2,0; if() #9376 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,0; if() #9377 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4612; Test 'if'
PUSHR d4; if() #9377 Body Start
LOADD d2,0; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4; if() #9377 Body End
POPARGS d5,0.0001; if() #9376 Body End
RETURNFUNC; Func[void __UpdateEWMRandom(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMRandomReaim(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; if() #9379 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4645; Test 'if'
LOADD d2,1; if() #9379 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9379 Body End
LOADD d2,1; if() #9380 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4750; Test 'if'
LOADD d2,1; if() #9380 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9382 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4749; Test 'if'
LOADD d2,1; if() #9383 Test AND if() #9382 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 4707; Test 'if'
PUSHR d4; if() #9383 Body Start
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 4749; if() #9383 Body End
LOADD d2,1; if() #9383 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,-20
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9383 Else End
GOTO 4932; if() #9382 Body End AND if() #9380 Body End
LOADD d2,1; if() #9380 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2
LOADD d2,1; if() #9385 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4842; Test 'if'
SETV d2,45; if() #9385 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d3,62832; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
MULTV d2,0.0001
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,1; if() #9386 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4842; Test 'if'
PUSHR d4; if() #9386 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9386 Body End
LOADD d2,1; if() #9385 Body End AND if() #9387 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4868; Test 'if'
LOADD d2,1; if() #9387 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
GOTO 4932; if() #9387 Body End
LOADD d2,1; if() #9389 Test AND if() #9387 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 4932; Test 'if'
LOADD d2,1; if() #9389 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 0,d2
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #9390 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4902; Test 'if'
PUSHR d4; if() #9390 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4932; if() #9390 Body End
LOADD d2,0; if() #9392 Test AND if() #9390 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4914; Test 'if'
PUSHR d4; if() #9392 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4932; if() #9392 Body End
LOADD d2,0; if() #9394 Test AND if() #9392 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 4926; Test 'if'
PUSHR d4; if() #9394 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 4932; if() #9394 Body End
PUSHR d4; if() #9394 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #9394 Else End
POPARGS d5,0.0002; if() #9392 Else End AND if() #9390 Else End AND if() #9389 Body End AND if() #9387 Else End AND if() #9380 Else End
RETURNFUNC; Func[void __UpdateEWMRandomReaim(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMVeer(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #9415 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5049; Test 'if'
LOADD d2,1; if() #9415 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9415 Body End
LOADD d2,0; if() #9417 Test AND if() #9415 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5083; Test 'if'
LOADD d2,1; if() #9417 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9417 Body End
LOADD d2,0; if() #9419 Test AND if() #9417 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5118; Test 'if'
LOADD d2,1; if() #9419 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9419 Body End
LOADD d2,0; if() #9421 Test AND if() #9419 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5152; Test 'if'
LOADD d2,1; if() #9421 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9421 Body End
LOADD d2,0; if() #9423 Test AND if() #9421 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5218; Test 'if'
LOADD d2,1; if() #9423 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9423 Body End
LOADD d2,0; if() #9425 Test AND if() #9423 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5283; Test 'if'
LOADD d2,1; if() #9425 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9425 Body End
LOADD d2,0; if() #9427 Test AND if() #9425 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5348; Test 'if'
LOADD d2,1; if() #9427 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 5406; if() #9427 Body End
LOADD d2,1; if() #9427 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9427 Else End
LOADD d2,1; if() #9425 Else End AND if() #9423 Else End AND if() #9421 Else End AND if() #9419 Else End AND if() #9417 Else End AND if() #9415 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMVeer(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMThrow(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1; if() #9398 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5498
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 5532; Test 'if'
LOADD d2,1; if() #9398 Body Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9398 Body End
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHVARGR d2
PUSHVARGV 0; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #9401 Test AND if(true) #9400 [Opt:AlwaysOn]
CALLFUNC 0.2253; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5584; Test 'unless'
LOADD d2,1; unless() #9401 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5600; unless() #9401 Body End
LOADD d2,1; unless() #9401 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV2 176,d2
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; unless() #9401 Else End
LOADD d2,1; if() #9403 Test
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5665; Test 'if'
PUSHR d4; unless() #9406 Test AND if(true) #9405 [Opt:AlwaysOn] AND if() #9403 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9898; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5664; Test 'unless'
LOADD d2,1; InlineFunc[untyped Max(untyped, untyped)] Params Start AND unless() #9406 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,0.1600
PUSHVARGR d2
PUSHVARGV -3.2000; InlineFunc[untyped Max(untyped, untyped)] Params End
MAXVARG; InlineFunc[untyped Max(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; unless() #9406 Body End
GOTO 5777; if() #9403 Body End
SETV d2,0; if() #9403 Else Start
STORED d2,0
LOADD d2,1; if() #9407 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
GOTOTRUE 5726; Test 'if'
LOADD d2,1; if() #9409 Test AND if() #9407 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5723; Test 'if'
LOADD d2,1; if() #9409 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5725; if() #9409 Body End
SETV d2,1; if() #9409 Else Start
STORED d2,0; if() #9409 Else End
GOTO 5728; if() #9407 Body End
SETV d2,1; if() #9407 Else Start
STORED d2,0; if() #9407 Else End
LOADD d2,0; if() #9411 Test
COMPAREV d2,0
GOTOTRUE 5777; Test 'if'
LOADD d2,1; if() #9412 Test AND if() #9411 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 5756; Test 'if'
SETV d2,0; if() #9412 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 5777; if() #9412 Body End
SETV d2,0; if() #9412 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #9412 Else End
POPARGS d5,0.0002; if() #9411 Body End AND if() #9403 Else End
RETURNFUNC; Func[void __UpdateEWMThrow(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMFall(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNJUMP,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,7
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
PUSHR d4; unless() #9333 Test AND if(true) #9332 [Opt:AlwaysOn]
CALLFUNC 0.2253; UsrFunc[bool IsSideview()] Call
POP d4
COMPAREV d2,0
GOTOFALSE 5840; Test 'unless'
LOADD d2,1; unless() #9333 Body Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
GOTO 5870; unless() #9333 Body End
LOADD d2,1; unless() #9333 Else Start
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYOFS,d2
LOADD d2,1
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNYOFS,d2; unless() #9333 Else End
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ADDV d2,0.1600
PUSHVARGR d2
PUSHVARGV 3.2000; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #9336 Test AND if(true) #9335 [Opt:AlwaysOn]
PUSHR d2
SETV d2,7
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 6046; Test 'if'
PUSHR d4; unless() #9337 Test AND if() #9336 Body Start
LOADD d2,1; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYOFS
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHYSZ
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNHXSZ; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Params End
CALLFUNC 0.9898; UsrFunc[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Call
POP d4
COMPAREV d2,0
GOTOFALSE 6046; Test 'unless'
SETV d2,0; unless() #9337 Body Start
STORED d2,0
LOADD d2,1; if() #9339 Test
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 5995; Test 'if'
LOADD d2,1; if() #9341 Test AND if() #9339 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-0.5000
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 5992; Test 'if'
LOADD d2,1; if() #9341 Body Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,-0.5000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
MULTV d2,0.7500
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
GOTO 5994; if() #9341 Body End
SETV d2,1; if() #9341 Else Start
STORED d2,0; if() #9341 Else End
GOTO 5997; if() #9339 Body End
SETV d2,1; if() #9339 Else Start
STORED d2,0; if() #9339 Else End
LOADD d2,0; if() #9343 Test
COMPAREV d2,0
GOTOTRUE 6046; Test 'if'
LOADD d2,1; if() #9344 Test AND if() #9343 Body Start
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,1
COMPAREV d2,0
GOTOTRUE 6025; Test 'if'
SETV d2,0; if() #9344 Body Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNZ,d2
PUSHR d4
LOADD d2,1; UsrFunc[void KillEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void KillEWeapon(EWeapon)] Params End
CALLFUNC 0.2317; UsrFunc[void KillEWeapon(EWeapon)] Call
POP d4
GOTO 6046; if() #9344 Body End
SETV d2,0; if() #9344 Else Start
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2; if() #9344 Else End
POPARGS d5,0.0002; if() #9343 Body End AND unless() #9337 Body End AND if() #9336 Body End
RETURNFUNC; Func[void __UpdateEWMFall(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMDrift(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #9300 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6163; Test 'if'
LOADD d2,1; if() #9300 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9300 Body End
LOADD d2,0; if() #9302 Test AND if() #9300 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6197; Test 'if'
LOADD d2,1; if() #9302 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9302 Body End
LOADD d2,0; if() #9304 Test AND if() #9302 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6232; Test 'if'
LOADD d2,1; if() #9304 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9304 Body End
LOADD d2,0; if() #9306 Test AND if() #9304 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6266; Test 'if'
LOADD d2,1; if() #9306 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9306 Body End
LOADD d2,0; if() #9308 Test AND if() #9306 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6332; Test 'if'
LOADD d2,1; if() #9308 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9308 Body End
LOADD d2,0; if() #9310 Test AND if() #9308 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6397; Test 'if'
LOADD d2,1; if() #9310 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9310 Body End
LOADD d2,0; if() #9312 Test AND if() #9310 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6462; Test 'if'
LOADD d2,1; if() #9312 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6520; if() #9312 Body End
LOADD d2,1; if() #9312 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9312 Else End
LOADD d2,1; if() #9310 Else End AND if() #9308 Else End AND if() #9306 Else End AND if() #9304 Else End AND if() #9302 Else End AND if() #9300 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDrift(EWeapon)] Body End
PUSHR d2; Func[void __UpdateEWMDriftWait(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
STORED d2,0
LOADD d2,1; if() #9315 Test
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,16
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 6644; Test 'if'
LOADD d2,1; if() #9315 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianCos(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianCos(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianCos(int)] Body Start
COSR d2,d3; InlineFunc[int RadianCos(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNSTEP
DIVV d2,100
PUSHR d2
LOADD d2,1; InlineFunc[int RadianSin(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadianSin(int)] Params End
MULTV d3,57.2958; InlineFunc[int RadianSin(int)] Body Start
SINR d2,d3; InlineFunc[int RadianSin(int)] Body End
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 6665; if() #9315 Body End
LOADD d2,1; if() #9315 Else Start
PUSHR d2
SETV d2,6
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
ADDV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,6
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
POP d2; if() #9315 Else End
LOADD d2,0; if() #9317 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6700; Test 'if'
LOADD d2,1; if() #9317 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9317 Body End
LOADD d2,0; if() #9319 Test AND if() #9317 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6734; Test 'if'
LOADD d2,1; if() #9319 Body Start
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9319 Body End
LOADD d2,0; if() #9321 Test AND if() #9319 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6769; Test 'if'
LOADD d2,1; if() #9321 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9321 Body End
LOADD d2,0; if() #9323 Test AND if() #9321 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6803; Test 'if'
LOADD d2,1; if() #9323 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9323 Body End
LOADD d2,0; if() #9325 Test AND if() #9323 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6869; Test 'if'
LOADD d2,1; if() #9325 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9325 Body End
LOADD d2,0; if() #9327 Test AND if() #9325 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6934; Test 'if'
LOADD d2,1; if() #9327 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9327 Body End
LOADD d2,0; if() #9329 Test AND if() #9327 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 6999; Test 'if'
LOADD d2,1; if() #9329 Body Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7057; if() #9329 Body End
LOADD d2,1; if() #9329 Else Start
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MULTV d2,0.7071
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #9329 Else End
LOADD d2,1; if() #9327 Else End AND if() #9325 Else End AND if() #9323 Else End AND if() #9321 Else End AND if() #9319 Else End AND if() #9317 Else End
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,1
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __UpdateEWMDriftWait(EWeapon)] Body End
PUSHARGSR d2,0.0011; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,10
SETV d2,0
STORED d2,9
SETV d2,0
STORED d2,8
SETV d2,0
STORED d2,7
SETV d2,0
STORED d2,6
SETV d2,0
STORED d2,5
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
LOADD d2,11; InlineFunc[untyped Floor(untyped)] Params Start
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[untyped Floor(untyped)] Params End
FLOOR d2; InlineFunc[untyped Floor(untyped)] Body
STORED d2,10
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8955 setup
STORED d2,2
LOADD d2,2; for() #8955 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7166; for() #8955 TestFail?
LOADD d2,2; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8955 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,9
LOADD d2,9; if() #8958 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,768
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 7145; Test 'if'
GOTO 7160; continue #8957 AND if() #8958 Body
LOADD d2,9; if() #8959 Test
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
COMPARER d3,d2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7160; Test 'if'
GOTO 7166; break #8956 AND if() #8959 Body
LOADD d2,2; for() #8955 Body End AND for() #8955 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,2
POP d2
GOTO 7120; for() #8955 End
LOADD d2,2; if() #8960 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7192; Test 'if'
ALLOCATEMEMV d2,43; if() #8960 Body Start
STORED d2,0
WRITEPODSTRING d2,"ghost.zh: Failed to find prototype eweapon"
LOADD d2,0; InlineFunc[void TraceS(int)] Params Start
SETR d0,d2; InlineFunc[void TraceS(int)] Params End
TRACE6 d3; InlineFunc[void TraceS(int)] Body
TRACE3; InlineFunc[void TraceNL()] Body
SETV d2,0
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
LOADD d3,0
DEALLOCATEMEMR d3
GOTO 7519; return (Void)
LOADD d3,0
DEALLOCATEMEMR d3; if() #8960 Body End
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
MODV d2,10
SUBV d2,6.2832
STORED d2,4
LOADD d2,11
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,10
POP d3
SUBR d3,d2
SETR d2,d3
MULTV d2,10000
STORED d2,3
LOADD d2,11
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,4
POP d3
SUBR d3,d2
SETR d2,d3
DIVV d2,100
RSHIFTV d2,0
STORED d2,7
LOADD d2,11; if() #8961 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7282; Test 'if'
LOADD d2,11; if() #8961 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
POP d3
ADDR d2,d3
STORED d2,5
GOTO 7294; if() #8961 Body End
LOADD d2,11; if() #8961 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
ADDV d2,8
STORED d2,6
LOADD d2,11
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
ADDV d2,8
STORED d2,5; if() #8961 Else End
LOADD d2,7; if() #8963 Test
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7352; Test 'if'
SETV d2,0; for() #8965 setup AND if() #8963 Body Start
STORED d2,1
LOADD d2,1; for() #8965 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7343; for() #8965 TestFail?
PUSHR d4; for() #8965 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,1
MULTV d2,6.2832
SETV d2,6.2832
PUSHR d2
LOADD d2,1
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9399; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #8965 Body End
LOADD d2,1; for() #8965 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7301; for() #8965 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7510; if() #8963 Body End
LOADD d2,7; if() #8968 Test AND if() #8963 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7397; Test 'if'
SETV d2,0; for() #8970 setup AND if() #8968 Body Start
STORED d2,1
LOADD d2,1; for() #8970 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7388; for() #8970 TestFail?
PUSHR d4; for() #8970 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETV d3,31416; InlineFunc[int Rand(int)] Params
RNDR d2,d3; InlineFunc[int Rand(int)] Body
DIVV d2,5000
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9399; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #8970 Body End
LOADD d2,1; for() #8970 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,1
POP d2
GOTO 7359; for() #8970 End
LOADD d2,9; InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
GOTO 7510; if() #8968 Body End
LOADD d2,3; if() #8973 Test AND if() #8968 Else Start
COMPAREV d2,1
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7471; Test 'if'
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start AND if() #8973 Body Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2
LOADD d2,4
DIVV d2,2
POP d3
SUBR d3,d2
SETR d2,d3
STORED d2,1
SETV d2,0; for() #8975 setup
STORED d2,0
LOADD d2,0; for() #8975 LoopTest
PUSHR d2
LOADD d2,3
POP d3
COMPARER d3,d2
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7470; for() #8975 TestFail?
PUSHR d4; for() #8975 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,1
PUSHR d2
LOADD d2,4
PUSHR d2
LOADD d2,0
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,3
SUBV d2,1
POP d3
DIVR d3,d2
SETR d2,d3
POP d3
ADDR d2,d3
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9399; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; for() #8975 Body End
LOADD d2,0; for() #8975 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7429; for() #8975 End
GOTO 7502; if() #8973 Body End
LOADD d2,3; if() #8978 Test AND if() #8973 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7502; Test 'if'
PUSHR d4; if() #8978 Body Start
LOADD d2,9; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params Start
PUSHR d2
LOADD d2,6
PUSHR d2
LOADD d2,5
PUSHR d2
SETR d2,LINKX; InlineFunc[int ArcTan(int, int)] Params Start
ADDV d2,8
PUSHR d2
LOADD d2,6
POP d3
SUBR d3,d2
PUSHR d3
SETR d2,LINKY
ADDV d2,8
PUSHR d2
LOADD d2,5
POP d3
SUBR d3,d2
SETR d1,d3; InlineFunc[int ArcTan(int, int)] Params End
POP d0; InlineFunc[int ArcTan(int, int)] Body Start
ARCTANR d2; InlineFunc[int ArcTan(int, int)] Body End
PUSHR d2; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Params End
CALLFUNC 0.9399; UsrFunc[void __CopyEWeapon(EWeapon, int, int, int)] Call
POP d4; if() #8978 Body End
LOADD d2,9; if() #8973 Else End AND InlineFunc[void Game->PlaySound(int)] Params Start
PUSHR d2
SETV d2,2
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void Game->PlaySound(int)] Params End
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body AND if() #8968 Else End
SETV d2,0; if() #8963 Else End
PUSHR d2
LOADD d2,11
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0012
RETURNFUNC; Func[void __DoEWeaponDeathPrototype(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
SUBV d2,1
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,1; if() #8943 Test
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 7610; Test 'if'
PUSHR d4; if() #8943 Body Start
LOADD d2,1; UsrFunc[int RadianAngle(int, int, int, int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,1
PUSHR d2
POP REFEWPN
PUSHR EWPNY
PUSHR LINKX
PUSHR LINKY; UsrFunc[int RadianAngle(int, int, int, int)] Params End
CALLFUNC 0.0023; UsrFunc[int RadianAngle(int, int, int, int)] Call
POP d4
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
SETV d2,300
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 7686; if() #8943 Body End
LOADD d2,1; if() #8945 Test AND if() #8943 Else Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 7635; Test 'if'
LOADD d2,1; if() #8945 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGLE
ADDV d2,0.3000
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,1; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
GOTO 7686; if() #8945 Body End
LOADD d2,1; if() #8945 Else Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,6
STORED d2,0
LOADD d2,0; if() #8947 Test
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7656; Test 'if'
PUSHR d4; if() #8947 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 0; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7686; if() #8947 Body End
LOADD d2,0; if() #8949 Test AND if() #8947 Else Start
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7668; Test 'if'
PUSHR d4; if() #8949 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 3; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7686; if() #8949 Body End
LOADD d2,0; if() #8951 Test AND if() #8949 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7680; Test 'if'
PUSHR d4; if() #8951 Body Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4
GOTO 7686; if() #8951 Body End
PUSHR d4; if() #8951 Else Start
LOADD d2,1; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params Start
PUSHR d2
PUSHV 2; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Params End
CALLFUNC 0.2458; UsrFunc[void SetEWeaponRotation(EWeapon, int)] Call
POP d4; if() #8951 Else End
POPARGS d5,0.0002; if() #8949 Else End AND if() #8947 Else End AND if() #8945 Else End AND if() #8943 Else End
RETURNFUNC; Func[void __DoEWeaponDeathAimAtLink(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 135; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void __DoEWeaponDeathExplode(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body Start
PUSHR d4
PUSHV 136; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHV -1
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void __DoEWeaponDeathSBombExplode(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8902 setup
STORED d2,0
LOADD d2,0; for() #8902 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7828; for() #8902 TestFail?
PUSHR d4; for() #8902 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8902 Body End
LOADD d2,0; for() #8902 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7780; for() #8902 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsHV(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #8898 setup
STORED d2,0
LOADD d2,0; for() #8898 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7891; for() #8898 TestFail?
PUSHR d4; for() #8898 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8898 Body End
LOADD d2,0; for() #8898 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7843; for() #8898 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsDiag(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #8906 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7961; Test 'if'
SETV d2,0; for() #8908 setup AND if() #8906 Body Start
STORED d2,0
LOADD d2,0; for() #8908 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 7960; for() #8908 TestFail?
PUSHR d4; for() #8908 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8908 Body End
LOADD d2,0; for() #8908 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7912; for() #8908 End
GOTO 8011; if() #8906 Body End
SETV d2,4; for() #8911 setup AND if() #8906 Else Start
STORED d2,0
LOADD d2,0; for() #8911 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8011; for() #8911 TestFail?
PUSHR d4; for() #8911 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8911 Body End
LOADD d2,0; for() #8911 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 7963; for() #8911 End
SETV d2,0; if() #8906 Else End
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FireballsRand(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8932 setup
STORED d2,0
LOADD d2,0; for() #8932 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8074; for() #8932 TestFail?
PUSHR d4; for() #8932 Body Start
PUSHV 129; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 200
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8932 Body End
LOADD d2,0; for() #8932 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8026; for() #8932 End
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fireballs(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8919 setup
STORED d2,0
LOADD d2,0; for() #8919 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8137; for() #8919 TestFail?
PUSHR d4; for() #8919 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8919 Body End
LOADD d2,0; for() #8919 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8089; for() #8919 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresHV(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body Start
SETR d4,SP
SETV d2,4; for() #8915 setup
STORED d2,0
LOADD d2,0; for() #8915 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8202; for() #8915 TestFail?
PUSHR d4; for() #8915 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8915 Body End
LOADD d2,0; for() #8915 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8154; for() #8915 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresDiag(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body Start
SETR d4,SP
SETV d3,2; InlineFunc[int Rand(int)] Params AND if() #8923 Test
RNDR d2,d3; InlineFunc[int Rand(int)] Body
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8274; Test 'if'
SETV d2,0; for() #8925 setup AND if() #8923 Body Start
STORED d2,0
LOADD d2,0; for() #8925 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8273; for() #8925 TestFail?
PUSHR d4; for() #8925 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8925 Body End
LOADD d2,0; for() #8925 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8225; for() #8925 End
GOTO 8324; if() #8923 Body End
SETV d2,4; for() #8928 setup AND if() #8923 Else Start
STORED d2,0
LOADD d2,0; for() #8928 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8324; for() #8928 TestFail?
PUSHR d4; for() #8928 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8928 Body End
LOADD d2,0; for() #8928 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8276; for() #8928 End
SETV d2,13; if() #8923 Else End AND InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath4FiresRand(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body Start
SETR d4,SP
SETV d2,0; for() #8936 setup
STORED d2,0
LOADD d2,0; for() #8936 LoopTest
COMPAREV d2,4
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8389; for() #8936 TestFail?
PUSHR d4; for() #8936 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 100
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8936 Body End
LOADD d2,0; for() #8936 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8341; for() #8936 End
SETV d2,4; for() #8939 setup
STORED d2,0
LOADD d2,0; for() #8939 LoopTest
COMPAREV d2,8
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8439; for() #8939 TestFail?
PUSHR d4; for() #8939 Body Start
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,1; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,1; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 71
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,1
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4; for() #8939 Body End
LOADD d2,0; for() #8939 LoopIncrement
PUSHR d2
ADDV d2,1
STORED d2,0
POP d2
GOTO 8391; for() #8939 End
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeath8Fires(EWeapon)] Body End
PUSHR d2; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body Start
SETR d4,SP
LOADD d2,1; InlineFunc[NPC Screen->CreateNPC(int)] Params Start
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[NPC Screen->CreateNPC(int)] Params End
CREATENPCR d2; InlineFunc[NPC Screen->CreateNPC(int)] Body Start
SETR d2,REFNPC; InlineFunc[NPC Screen->CreateNPC(int)] Body End
STORED d2,0
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCX,d2
LOADD d2,1
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFNPC
SETR NPCY,d2
SETV d2,0
PUSHR d2
LOADD d2,1
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0002
RETURNFUNC; Func[void __DoEWeaponDeathSpawnNPC(EWeapon)] Body End
SETR d4,SP; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body Start
PUSHR d4
PUSHV 140; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params Start
PUSHR d4
LOADD d2,0; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
PUSHR d4
LOADD d2,0; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR
PUSHV 0
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
DIVV d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
PUSHR EWPNMISCD
PUSHARGSV 0,0.0002; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Params End
CALLFUNC 0.1390; UsrFunc[EWeapon FireNonAngularEWeapon(int, int, int, int, int, int, int, int, int)] Call
POP d4
SETV d2,13; InlineFunc[void Game->PlaySound(int)] Params
PLAYSOUNDR d2; InlineFunc[void Game->PlaySound(int)] Body
SETV d2,0
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
POPARGS d5,0.0001
RETURNFUNC; Func[void __DoEWeaponDeathSingleFire(EWeapon)] Body End
PUSHARGSR d2,0.0005; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body Start
SETR d4,SP
SETV d2,0
STORED d2,4
SETV d2,0
STORED d2,3
SETV d2,0
STORED d2,2
SETV d2,0
STORED d2,1
PUSHR d4
CALLFUNC 0.1330; UsrFunc[int FindUnusedFFC()] Call
POP d4
STORED d2,4
LOADD d2,4; if() #8980 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8579; Test 'if'
SETV d2,0; if() #8980 Body Start
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNDEAD,d2
GOTO 8723; return (Void) AND if() #8980 Body End
LOADD d2,4; InlineFunc[FFC Screen->LoadFFC(int)] Params
SUBV d2,1; InlineFunc[FFC Screen->LoadFFC(int)] Body
STORED d2,3
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8981 setup
STORED d2,0
LOADD d2,0; for() #8981 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8626; for() #8981 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8981 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,2
LOADD d2,2; if() #8984 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,768
COMPAREV d2,512
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8609; Test 'if'
GOTO 8620; continue #8983 AND if() #8984 Body
LOADD d2,1; InlineFunc[untyped Min(untyped, untyped)] Params Start
PUSHVARGR d2
LOADD d2,2
PUSHR d2
SETV d2,3
PUSHR d2
POP d0
POP REFEWPN
PUSHVARGR EWPNMISCD; InlineFunc[untyped Min(untyped, untyped)] Params End
MINVARG; InlineFunc[untyped Min(untyped, untyped)] Body
STORED d2,1; for() #8981 Body End
LOADD d2,0; for() #8981 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8584; for() #8981 End
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,3
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,5
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ORV d2,1024
PUSHR d2
LOADD d2,5
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
SETV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR DATA,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterX(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterX(EWeapon)] Params End
CALLFUNC 0.0870; UsrFunc[int CenterX(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR X,d2
PUSHR d4
LOADD d2,5; UsrFunc[int CenterY(EWeapon)] Params Start
PUSHR d2; UsrFunc[int CenterY(EWeapon)] Params End
CALLFUNC 0.0894; UsrFunc[int CenterY(EWeapon)] Call
POP d4
SUBV d2,8
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR Y,d2
LOADD d2,5
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFFFC
SETR FFSCRIPT,d2
LOADD d2,1
SUBV d2,1
PUSHR d2
LOADD d2,3
POP d3
PUSHR d2
PUSHR d3
SETV d2,0
PUSHR d2
POP d0
POP d2
POP REFFFC
SETR FFINITDD,d2
POPARGS d5,0.0006
RETURNFUNC; Func[void __DoEWeaponDeathRunScript(EWeapon)] Body End
PUSHARGSR d2,0.0002; Func[void UpdateEWeapons()] Body Start
SETR d4,SP
SETV d2,0
STORED d2,1
SETR d2,LINKACTION; unless() #8744 Test
COMPAREV d2,4
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8739
SETR d2,LINKACTION
COMPAREV d2,5
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8747
SETR d2,LINKACTION
COMPAREV d2,14
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0.0001
GOTOMORE 8755
SETR d2,LINKACTION
COMPAREV d2,15
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOFALSE 8812; Test 'unless'
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8749 setup AND unless() #8744 Body Start
STORED d2,0
LOADD d2,0; for() #8749 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8811; for() #8749 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8749 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #8752 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8796
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8800; Test 'if'
GOTO 8805; continue #8751 AND if() #8752 Body
PUSHR d4
LOADD d2,1; UsrFunc[void UpdateEWeapon(EWeapon)] Params Start
PUSHR d2; UsrFunc[void UpdateEWeapon(EWeapon)] Params End
CALLFUNC 0.2581; UsrFunc[void UpdateEWeapon(EWeapon)] Call
POP d4; for() #8749 Body End
LOADD d2,0; for() #8749 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8760; for() #8749 End
GOTO 8865; unless() #8744 Body End
SETR d2,EWPNCOUNT; InlineFunc[int Screen->NumEWeapons()] Body AND for() #8754 setup AND unless() #8744 Else Start
STORED d2,0
LOADD d2,0; for() #8754 LoopTest
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8865; for() #8754 TestFail?
LOADD d2,0; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Params AND for() #8754 Body Start
SUBV d2,1; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body Start
LOADEWEAPONR d2
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->LoadEWeapon(int)] Body End
STORED d2,1
LOADD d2,1; if() #8757 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,512
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0.0001
GOTOMORE 8850
LOADD d2,1
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,256
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8854; Test 'if'
GOTO 8859; continue #8756 AND if() #8757 Body
PUSHR d4
LOADD d2,1; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params Start
PUSHR d2; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Params End
CALLFUNC 0.8867; UsrFunc[void __UpdateEWeaponVisualFlags(EWeapon)] Call
POP d4; for() #8754 Body End
LOADD d2,0; for() #8754 LoopIncrement
PUSHR d2
SUBV d2,1
STORED d2,0
POP d2
GOTO 8814; for() #8754 End
POPARGS d5,0.0002; unless() #8744 Else End
RETURNFUNC; Func[void UpdateEWeapons()] Body End
PUSHARGSR d2,0.0002; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body Start
SETR d4,SP
LOADD d2,2; if() #9430 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,8
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8896; Test 'if'
LOADD d2,2; if() #9431 Test AND if() #9430 Body Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8896; Test 'if'
PUSHR d4; if() #9431 Body Start
LOADD d2,2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params Start
PUSHR d2; UsrFunc[void DrawEWeaponShadow(EWeapon)] Params End
CALLFUNC 0.0979; UsrFunc[void DrawEWeaponShadow(EWeapon)] Call
POP d4; if() #9431 Body End
LOADD d2,2; if() #9430 Body End AND if() #9432 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,4
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9097; Test 'if'
SETV d2,1000; if() #9432 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
LOADD d2,2; if() #9434 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 8937
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 8942; Test 'if'
GOTO 9154; return (Void) AND if() #9434 Body
SETV d2,0
STORED d2,1
LOADD d2,2; if() #9436 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNANGULAR
COMPAREV d2,0
GOTOTRUE 8957; Test 'if'
LOADD d2,2; InlineFunc[int RadtoDeg(int)] Params Start AND if() #9436 Body Start
PUSHR d2
POP REFEWPN
SETR d3,EWPNANGLE; InlineFunc[int RadtoDeg(int)] Params End
RADTODEG d2,d3; InlineFunc[int RadtoDeg(int)] Body
STORED d2,1
GOTO 9023; if() #9436 Body End
PUSHR d4; if() #9436 Else Start
LOADD d2,2; UsrFunc[int __NormalizeDir(int)] Params Start
PUSHR d2
POP REFEWPN
PUSHR EWPNDIR; UsrFunc[int __NormalizeDir(int)] Params End
CALLFUNC 0.2177; UsrFunc[int __NormalizeDir(int)] Call
POP d4
STORED d2,0
LOADD d2,0; if() #9438 Test
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8973; Test 'if'
SETV d2,-90; if() #9438 Body Start
STORED d2,1
GOTO 9023; if() #9438 Body End
LOADD d2,0; if() #9440 Test AND if() #9438 Else Start
COMPAREV d2,5
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8981; Test 'if'
SETV d2,-45; if() #9440 Body Start
STORED d2,1
GOTO 9023; if() #9440 Body End
LOADD d2,0; if() #9442 Test AND if() #9440 Else Start
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8989; Test 'if'
SETV d2,0; if() #9442 Body Start
STORED d2,1
GOTO 9023; if() #9442 Body End
LOADD d2,0; if() #9444 Test AND if() #9442 Else Start
COMPAREV d2,7
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 8997; Test 'if'
SETV d2,45; if() #9444 Body Start
STORED d2,1
GOTO 9023; if() #9444 Body End
LOADD d2,0; if() #9446 Test AND if() #9444 Else Start
COMPAREV d2,1
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9005; Test 'if'
SETV d2,90; if() #9446 Body Start
STORED d2,1
GOTO 9023; if() #9446 Body End
LOADD d2,0; if() #9448 Test AND if() #9446 Else Start
COMPAREV d2,6
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9013; Test 'if'
SETV d2,135; if() #9448 Body Start
STORED d2,1
GOTO 9023; if() #9448 Body End
LOADD d2,0; if() #9450 Test AND if() #9448 Else Start
COMPAREV d2,2
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9021; Test 'if'
SETV d2,180; if() #9450 Body Start
STORED d2,1
GOTO 9023; if() #9450 Body End
SETV d2,-135; if() #9450 Else Start
STORED d2,1; if() #9450 Else End
SETV d2,0; if() #9448 Else End AND if() #9446 Else End AND if() #9444 Else End AND if() #9442 Else End AND if() #9440 Else End AND if() #9438 Else End AND if() #9436 Else End
STORED d2,0
LOADD d2,1; if() #9452 Test
COMPAREV d2,0
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9036
LOADD d2,1
COMPAREV d2,180
SETMORE d2
COMPAREV d2,0
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9043; Test 'if'
SETV d2,0; if() #9452 Body Start
STORED d2,0
GOTO 9045; if() #9452 Body End
SETV d2,2; if() #9452 Else Start
STORED d2,0; if() #9452 Else End
PUSHV 4; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params Start
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNTILE
PUSHARGSV 1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNCSET
PUSHARGSV -1,0.0002
LOADD d2,2
PUSHR d2
POP REFEWPN
PUSHR EWPNX
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,2
PUSHR d2
POP REFEWPN
SETR d2,EWPNZ
POP d3
SUBR d3,d2
PUSHR d3
LOADD d2,1
PUSHR d2
LOADD d2,0
PUSHR d2
PUSHV 1
PUSHV 128; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Params End
DRAWTILE; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body Start
POPARGS d5,0.0015; InlineFunc[void Screen->DrawTile(int, int, int, int, int, int, int, int, int, int, int, int, int, bool, int)] Body End
GOTO 9154; if() #9432 Body End
LOADD d2,2; if() #9455 Test AND if() #9432 Else Start
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,16
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9137; Test 'if'
SETR d2,gd27; if() #9456 Test AND if() #9455 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9128; Test 'if'
SETV d2,1000; if() #9456 Body Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2
GOTO 9137; if() #9456 Body End
SETV d2,0; if() #9456 Else Start
PUSHR d2
LOADD d2,2
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNXOFS,d2; if() #9456 Else End
LOADD d2,2; if() #9455 Body End AND if() #9458 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9154; Test 'if'
PUSHR d4; if() #9458 Body Start
LOADD d2,2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #9458 Body End
POPARGS d5,0.0003; if() #9432 Else End
RETURNFUNC; Func[void __UpdateEWeaponVisualFlags(EWeapon)] Body End
SETR d4,SP; Func[void UpdateGhostZH1()] Body Start
PUSHR d4
CALLFUNC 0.8725; UsrFunc[void UpdateEWeapons()] Call
PEEK d4
CALLFUNC 0.0918; UsrFunc[void CleanUpGhostFFCs()] Call
PEEK d4
CALLFUNC 0.9165; UsrFunc[void UpdateGhostZHData1()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH1()] Body End
PUSHR d2; Func[void UpdateGhostZHData1()] Body Start
SETR d4,SP
SETR d2,CURDMAP; InlineFunc[int Game->GetCurDMap()] Body
LSHIFTV d2,8
PUSHR d2
SETR d2,CURDSCR; InlineFunc[int Game->GetCurDMapScreen()] Body
POP d3
ADDR d2,d3
STORED d2,0
SETR d2,gd27; if() #8768 Test
PUSHR d2
POP d0
READPODARRAYV d2,7
PUSHR d2
LOADD d2,0
POP d3
COMPARER d3,d2
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9198; Test 'if'
SETV d2,0; if() #8768 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
LOADD d2,0
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 7,d2
GOTO 9220; if() #8768 Body End
SETR d2,gd27; if() #8770 Test AND if() #8768 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,6
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9220; Test 'if'
SETR d2,gd27; if() #8770 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,6
PUSHR d2
SUBV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
POP d2; if() #8770 Body End
POPARGS d5,0.0001; if() #8768 Else End
RETURNFUNC; Func[void UpdateGhostZHData1()] Body End
SETR d4,SP; Func[void UpdateGhostZH2()] Body Start
PUSHR d4
CALLFUNC 0.1045; UsrFunc[void DrawGhostFFCs()] Call
PEEK d4
CALLFUNC 0.0070; UsrFunc[void AutoGhost()] Call
PEEK d4
CALLFUNC 0.9231; UsrFunc[void UpdateGhostZHData2()] Call
POP d4
RETURNFUNC; Func[void UpdateGhostZH2()] Body End
SETR d4,SP; Func[void UpdateGhostZHData2()] Body Start
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,1
ADDV d2,1
MODV d2,8
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 1,d2
SETR d2,gd27; if() #8772 Test
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,1
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9263; Test 'if'
SETR d2,gd27; if() #8772 Body Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ORV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2
GOTO 9273; if() #8772 Body End
SETR d2,gd27; if() #8772 Else Start
PUSHR d2
POP d0
READPODARRAYV d2,0
ANDV d2,-2
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 0,d2; if() #8772 Else End
SETR d2,gd27; if(true) #8774 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,3
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
POP d2
SETR d2,gd27; if() #8775 Test
PUSHR d2
POP d0
READPODARRAYV d2,3
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9310; Test 'if'
SETV d2,0; if() #8775 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 3,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,2
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 2,d2; if() #8775 Body End
SETR d2,gd27; if(true) #8776 [Opt:AlwaysOn]
PUSHR d2
POP d0
READPODARRAYV d2,5
PUSHR d2
ADDV d2,1
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
POP d2
SETR d2,gd27; if() #8777 Test
PUSHR d2
POP d0
READPODARRAYV d2,5
COMPAREV d2,8
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9347; Test 'if'
SETV d2,0; if() #8777 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 5,d2
SETR d2,gd27
PUSHR d2
POP d0
READPODARRAYV d2,4
ADDV d2,1
MODV d2,4
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 4,d2; if() #8777 Body End
RETURNFUNC; Func[void UpdateGhostZHData2()] Body End
SETR d4,SP; Func[bool __IsScriptNameChar(int, bool)] Body Start
LOADD d2,1; if() #9262 Test
COMPAREV d2,97
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9361; Test 'if'
LOADD d2,1; if() #9263 Test AND if() #9262 Body Start
COMPAREV d2,122
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9361; Test 'if'
SETV d2,1; return Start AND if() #9263 Body Start
GOTO 9397; return End AND if() #9263 Body End
LOADD d2,1; if() #9262 Body End AND if() #9264 Test
COMPAREV d2,65
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9373; Test 'if'
LOADD d2,1; if() #9265 Test AND if() #9264 Body Start
COMPAREV d2,90
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9373; Test 'if'
SETV d2,1; return Start AND if() #9265 Body Start
GOTO 9397; return End AND if() #9265 Body End
LOADD d2,1; if() #9264 Body End AND if() #9266 Test
COMPAREV d2,95
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9380; Test 'if'
SETV d2,1; return Start AND if() #9266 Body Start
GOTO 9397; return End AND if() #9266 Body End
LOADD d2,0; unless() #9267 Test
COMPAREV d2,0
GOTOFALSE 9395; Test 'unless'
LOADD d2,1; if() #9268 Test AND unless() #9267 Body Start
COMPAREV d2,48
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9395; Test 'if'
LOADD d2,1; if() #9269 Test AND if() #9268 Body Start
COMPAREV d2,57
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9395; Test 'if'
SETV d2,1; return Start AND if() #9269 Body Start
GOTO 9397; return End AND if() #9269 Body End
SETV d2,0; if() #9268 Body End AND unless() #9267 Body End AND return Start
GOTO 9397; return End
POPARGS d5,0.0002
RETURNFUNC; Func[bool __IsScriptNameChar(int, bool)] Body End
PUSHR d2; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body Start
SETR d4,SP
LOADD d2,4; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params Start
PUSHR d2
POP REFEWPN
SETR d2,EWPNID; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Params End
CREATEEWEAPONR d2; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body Start
SETR d2,REFEWPN; InlineFunc[EWeapon Screen->CreateEWeapon(int)] Body End
STORED d2,0
LOADD d2,4; if() #8882 Test
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,0
SETLESS d2
COMPAREV d2,0
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9433; Test 'if'
LOADD d2,0; InlineFunc[void EWeapon->UseSprite(int)] Params Start AND if() #8882 Body Start
PUSHR d2
LOADD d2,4
PUSHR d2
SETV d2,5
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD; InlineFunc[void EWeapon->UseSprite(int)] Params End
POP d3; InlineFunc[void EWeapon->UseSprite(int)] Body Start
SETR REFEWPN,d3
EWPNUSESPRITER d2; InlineFunc[void EWeapon->UseSprite(int)] Body End AND if() #8882 Body End
LOADD d2,4; if() #8883 Test
PUSHR d2
POP REFEWPN
SETR d2,EWPNEXTEND
COMPAREV d2,3
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9569; Test 'if'
SETV d2,3; if() #8883 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNEXTEND,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNTYSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHXSZ,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
MULTV d2,16
SETV d2,16
PUSHR d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNTYSZ
POP d3
MULTR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNHYSZ,d2
LOADD d2,3
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
MULTV d2,8
SETV d2,8
PUSHR d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNTXSZ
POP d3
MULTR d2,d3
POP d3
SUBR d3,d2
SETR d2,d3
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2
GOTO 9589; if() #8883 Body End
LOADD d2,3; if() #8883 Else Start
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNX,d2
LOADD d2,2
SUBV d2,8
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNY,d2; if() #8883 Else End
LOADD d2,4
PUSHR d2
SETV d2,4
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNSTEP,d2
LOADD d2,4
PUSHR d2
POP REFEWPN
SETR d2,EWPNPOWER
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNPOWER,d2
SETV d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNANGULAR,d2
LOADD d2,1
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
POP REFEWPN
SETR EWPNANGLE,d2
PUSHR d4
LOADD d2,0; UsrFunc[void SetEWeaponDir(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponDir(EWeapon)] Params End
CALLFUNC 0.1796; UsrFunc[void SetEWeaponDir(EWeapon)] Call
POP d4
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNX
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,4
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0
PUSHR d2
POP REFEWPN
SETR d2,EWPNY
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,5
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,8
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,10
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,10
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4; if() #8885 Test
PUSHR d2
SETV d2,8
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,15
SETTRUEI d2
COMPAREV d2,0
GOTOTRUE 9727
LOADD d2,4
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
COMPAREV d2,-1
SETTRUEI d2
CASTBOOLF d2
COMPAREV d2,0.0001
SETMOREI d2
COMPAREV d2,0
GOTOTRUE 9748; Test 'if'
PUSHR d4; if() #8885 Body Start
LOADD d2,0; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params Start
PUSHR d2; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Params End
CALLFUNC 0.2339; UsrFunc[int __GetEWeaponThrowHeight(EWeapon)] Call
POP d4
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
GOTO 9766; if() #8885 Body End
LOADD d2,4; if() #8885 Else Start
PUSHR d2
SETV d2,9
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,9
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2; if() #8885 Else End
LOADD d2,4
PUSHR d2
SETV d2,11
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,11
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,12
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,12
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,13
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,13
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,14
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,14
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,4
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,-257
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
SETV d2,15
PUSHR d2
POP d0
POP d2
POP REFEWPN
SETR EWPNMISCD,d2
LOADD d2,0; if() #8888 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,32
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9879; Test 'if'
SETV d2,0; if() #8888 Body Start
PUSHR d2
LOADD d2,0
POP d3
PUSHR d2
PUSHR d3
POP d2
CASTBOOLI d2
POP REFEWPN
SETR EWPNCOLLDET,d2; if() #8888 Body End
LOADD d2,0; if() #8889 Test
PUSHR d2
SETV d2,15
PUSHR d2
POP d0
POP REFEWPN
SETR d2,EWPNMISCD
ANDV d2,2
COMPAREV d2,0
SETFALSEI d2
COMPAREV d2,0
GOTOTRUE 9896; Test 'if'
PUSHR d4; if() #8889 Body Start
LOADD d2,0; UsrFunc[void SetEWeaponRotation(EWeapon)] Params Start
PUSHR d2; UsrFunc[void SetEWeaponRotation(EWeapon)] Params End
CALLFUNC 0.1927; UsrFunc[void SetEWeaponRotation(EWeapon)] Call
POP d4; if() #8889 Body End
POPARGS d5,0.0005
RETURNFUNC; Func[void __CopyEWeapon(EWeapon, int, int, int)] Body End
PUSHR d2; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body Start
SETR d4,SP
SETV d2,0; for() #9624 setup
STORED d2,0
LOADD d2,0; for() #9624 LoopTest
PUSHR d2
LOADD d2,1
SUBV d2,1
POP d3
COMPARER d3,d2
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 9948; for() #9624 TestFail?
LOADD d2,6; InlineFunc[bool Screen->isSolid(int, int)] Params Start AND if() #9627 Test AND for() #9624 Body Start
PUSHR d2
LOADD d2,4
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,0
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,5
PUSHR d2
LOADD d2,3
POP d3
ADDR d2,d3
PUSHR d2
LOADD d2,2
POP d3
ADDR d2,d3
SETR d1,d2; InlineFunc[bool Screen->isSolid(int, int)] Params End
POP d0; InlineFunc[bool Screen->isSolid(int, int)] Body Start
ISSOLID d2; InlineFunc[bool Screen->isSolid(int, int)] Body End
COMPAREV d2,0
GOTOTRUE 9944; Test 'if'
SETV d2,0; if() #9628 Test AND if() #9627 Body Start
PUSHR d2
POP d0
SETR d2,SCREENFLAGSD
ANDV d2,4
COMPAREV d2,0
GOTOTRUE 9944; Test 'if'
SETV d2,1; return Start AND if() #9628 Body Start
GOTO 9950; return End AND if() #9628 Body End
LOADD d2,0; if() #9627 Body End AND for() #9624 Body End AND for() #9624 LoopIncrement
ADDV d2,1
STORED d2,0
GOTO 9902; for() #9624 End
SETV d2,0; return Start
GOTO 9950; return End
POPARGS d5,0.0007
RETURNFUNC; Func[bool ghost2__OnSidePlatform(int, int, int, int, int, int)] Body End


PUSHR d0; void run(int) Params
PUSHR REFITEMCLASS; void run(int) Body Start
SETR d4,SP
LOADD d2,1; if() #11062 Test
COMPAREV d2,0
SETLESSI d2
COMPAREV d2,0
GOTOTRUE 16; Test 'if'
SETV d2,-1; if() #11062 Body Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2
GOTO 22; if() #11062 Body End
LOADD d2,1; if() #11062 Else Start
PUSHR d2
SETR d2,gd27
SETR d0,d2
POP d2
WRITEPODARRAYVR 6,d2; if() #11062 Else End
POPARGS d5,0.0002
RETURNFUNC; void run(int) Body End


SETV gd9,0; void run() Body Start
SETV gd10,0
SETV gd12,0
SETV gd11,0
SETV gd5,0
SETV gd15,0
SETV gd6,0
SETV gd14,0
SETV gd13,0
SETV gd7,0
SETV gd8,0
SETV gd2,0
SETV gd3,0
SETV gd4,0
ALLOCATEGMEMV d2,25
SETR gd26,d2
SETV gd16,0
SETV gd17,0
SETV gd21,0
SETV gd18,0
SETV gd22,0
SETV gd19,0
SETV gd20,0
ALLOCATEGMEMV d2,32
SETR gd25,d2
SETV gd23,0
SETV gd24,0
ALLOCATEGMEMV d2,8
SETR gd27,d2
ALLOCATEGMEMV d2,1000
SETR gd28,d2
ALLOCATEGMEMV d2,4096
SETR gd1,d2
QUIT; void run() Body End

